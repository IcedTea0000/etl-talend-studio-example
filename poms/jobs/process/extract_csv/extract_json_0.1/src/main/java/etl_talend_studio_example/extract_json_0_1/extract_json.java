// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package etl_talend_studio_example.extract_json_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: extract_json Purpose: <br>
 * Description: <br>
 * 
 * @author ngohoanglam65@gmail.com
 * @version 7.3.1.20200219_1130
 * @status
 */
public class extract_json implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (bk != null) {

				this.setProperty("bk", bk.toString());

			}

			if (data_source != null) {

				this.setProperty("data_source", data_source.toString());

			}

			if (output != null) {

				this.setProperty("output", output.toString());

			}

		}

		public String bk;

		public String getBk() {
			return this.bk;
		}

		public String data_source;

		public String getData_source() {
			return this.data_source;
		}

		public String output;

		public String getOutput() {
			return this.output;
		}
	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "extract_json";
	private final String projectName = "ETL_TALEND_STUDIO_EXAMPLE";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					extract_json.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(extract_json.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tJSONDocOpen_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJSONDocOpen_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowToIterate_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUniqRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJSONDocOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUniqRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJSONDocOutput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJSONDocSave_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJSONDocSave_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJSONDocSave_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostjob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBCommit_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBCommit_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBClose_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBClose_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPrejob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBConnection_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJSONDocOpen_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJSONDocSave_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostjob_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBCommit_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBClose_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPrejob_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJSONDocOpen_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tJSONDocOpen_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tJSONDocOpen_1 begin ] start
				 */

				ok_Hash.put("tJSONDocOpen_1", false);
				start_Hash.put("tJSONDocOpen_1", System.currentTimeMillis());

				currentComponent = "tJSONDocOpen_1";

				int tos_count_tJSONDocOpen_1 = 0;

				/**
				 * [tJSONDocOpen_1 begin ] stop
				 */

				/**
				 * [tJSONDocOpen_1 main ] start
				 */

				currentComponent = "tJSONDocOpen_1";

				globalMap.remove("tJSONDocOpen_1_CURRENT_NODE");
				globalMap.put("tJSONDocOpen_1_COUNT_ROOT_OBJECTS", 0);
				try {
					de.jlo.talendcomp.json.JsonDocument tJSONDocOpen_1 = new de.jlo.talendcomp.json.JsonDocument(true);
					globalMap.put("tJSONDocOpen_1", tJSONDocOpen_1);
					globalMap.put("tJSONDocOpen_1_CURRENT_NODE", tJSONDocOpen_1.getRootNode());
					globalMap.put("tJSONDocOpen_1_CURRENT_PATH", "$");
					globalMap.put("tJSONDocOpen_1_COUNT_ROOT_OBJECTS", tJSONDocOpen_1.getCountRootObjects());
				} catch (Exception e) {
					globalMap.put("tJSONDocOpen_1_ERROR_MESSAGE", e.getMessage());
					throw e;
				}

				tos_count_tJSONDocOpen_1++;

				/**
				 * [tJSONDocOpen_1 main ] stop
				 */

				/**
				 * [tJSONDocOpen_1 process_data_begin ] start
				 */

				currentComponent = "tJSONDocOpen_1";

				/**
				 * [tJSONDocOpen_1 process_data_begin ] stop
				 */

				/**
				 * [tJSONDocOpen_1 process_data_end ] start
				 */

				currentComponent = "tJSONDocOpen_1";

				/**
				 * [tJSONDocOpen_1 process_data_end ] stop
				 */

				/**
				 * [tJSONDocOpen_1 end ] start
				 */

				currentComponent = "tJSONDocOpen_1";

				ok_Hash.put("tJSONDocOpen_1", true);
				end_Hash.put("tJSONDocOpen_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tFileInputDelimited_1Process(globalMap);

				/**
				 * [tJSONDocOpen_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tJSONDocOpen_1 finally ] start
				 */

				currentComponent = "tJSONDocOpen_1";

				/**
				 * [tJSONDocOpen_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJSONDocOpen_1_SUBPROCESS_STATE", 1);
	}

	public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_ETL_TALEND_STUDIO_EXAMPLE_extract_json = new byte[0];
		static byte[] commonByteArray_ETL_TALEND_STUDIO_EXAMPLE_extract_json = new byte[0];

		public String customer_number;

		public String getCustomer_number() {
			return this.customer_number;
		}

		public String order_id;

		public String getOrder_id() {
			return this.order_id;
		}

		public String product_id;

		public String getProduct_id() {
			return this.product_id;
		}

		public String price;

		public String getPrice() {
			return this.price;
		}

		public String review_id;

		public String getReview_id() {
			return this.review_id;
		}

		public String review_score;

		public String getReview_score() {
			return this.review_score;
		}

		public String review_content;

		public String getReview_content() {
			return this.review_content;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ETL_TALEND_STUDIO_EXAMPLE_extract_json.length) {
					if (length < 1024 && commonByteArray_ETL_TALEND_STUDIO_EXAMPLE_extract_json.length == 0) {
						commonByteArray_ETL_TALEND_STUDIO_EXAMPLE_extract_json = new byte[1024];
					} else {
						commonByteArray_ETL_TALEND_STUDIO_EXAMPLE_extract_json = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ETL_TALEND_STUDIO_EXAMPLE_extract_json, 0, length);
				strReturn = new String(commonByteArray_ETL_TALEND_STUDIO_EXAMPLE_extract_json, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ETL_TALEND_STUDIO_EXAMPLE_extract_json) {

				try {

					int length = 0;

					this.customer_number = readString(dis);

					this.order_id = readString(dis);

					this.product_id = readString(dis);

					this.price = readString(dis);

					this.review_id = readString(dis);

					this.review_score = readString(dis);

					this.review_content = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.customer_number, dos);

				// String

				writeString(this.order_id, dos);

				// String

				writeString(this.product_id, dos);

				// String

				writeString(this.price, dos);

				// String

				writeString(this.review_id, dos);

				// String

				writeString(this.review_score, dos);

				// String

				writeString(this.review_content, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("customer_number=" + customer_number);
			sb.append(",order_id=" + order_id);
			sb.append(",product_id=" + product_id);
			sb.append(",price=" + price);
			sb.append(",review_id=" + review_id);
			sb.append(",review_score=" + review_score);
			sb.append(",review_content=" + review_content);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_ETL_TALEND_STUDIO_EXAMPLE_extract_json = new byte[0];
		static byte[] commonByteArray_ETL_TALEND_STUDIO_EXAMPLE_extract_json = new byte[0];

		public String customer_number;

		public String getCustomer_number() {
			return this.customer_number;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ETL_TALEND_STUDIO_EXAMPLE_extract_json.length) {
					if (length < 1024 && commonByteArray_ETL_TALEND_STUDIO_EXAMPLE_extract_json.length == 0) {
						commonByteArray_ETL_TALEND_STUDIO_EXAMPLE_extract_json = new byte[1024];
					} else {
						commonByteArray_ETL_TALEND_STUDIO_EXAMPLE_extract_json = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ETL_TALEND_STUDIO_EXAMPLE_extract_json, 0, length);
				strReturn = new String(commonByteArray_ETL_TALEND_STUDIO_EXAMPLE_extract_json, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ETL_TALEND_STUDIO_EXAMPLE_extract_json) {

				try {

					int length = 0;

					this.customer_number = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.customer_number, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("customer_number=" + customer_number);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class cust_noStruct implements routines.system.IPersistableRow<cust_noStruct> {
		final static byte[] commonByteArrayLock_ETL_TALEND_STUDIO_EXAMPLE_extract_json = new byte[0];
		static byte[] commonByteArray_ETL_TALEND_STUDIO_EXAMPLE_extract_json = new byte[0];

		public String customer_number;

		public String getCustomer_number() {
			return this.customer_number;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ETL_TALEND_STUDIO_EXAMPLE_extract_json.length) {
					if (length < 1024 && commonByteArray_ETL_TALEND_STUDIO_EXAMPLE_extract_json.length == 0) {
						commonByteArray_ETL_TALEND_STUDIO_EXAMPLE_extract_json = new byte[1024];
					} else {
						commonByteArray_ETL_TALEND_STUDIO_EXAMPLE_extract_json = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ETL_TALEND_STUDIO_EXAMPLE_extract_json, 0, length);
				strReturn = new String(commonByteArray_ETL_TALEND_STUDIO_EXAMPLE_extract_json, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ETL_TALEND_STUDIO_EXAMPLE_extract_json) {

				try {

					int length = 0;

					this.customer_number = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.customer_number, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("customer_number=" + customer_number);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(cust_noStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class order_infoStruct implements routines.system.IPersistableRow<order_infoStruct> {
		final static byte[] commonByteArrayLock_ETL_TALEND_STUDIO_EXAMPLE_extract_json = new byte[0];
		static byte[] commonByteArray_ETL_TALEND_STUDIO_EXAMPLE_extract_json = new byte[0];

		public String customer_number;

		public String getCustomer_number() {
			return this.customer_number;
		}

		public String order_id;

		public String getOrder_id() {
			return this.order_id;
		}

		public String product_id;

		public String getProduct_id() {
			return this.product_id;
		}

		public String price;

		public String getPrice() {
			return this.price;
		}

		public String review_id;

		public String getReview_id() {
			return this.review_id;
		}

		public String review_score;

		public String getReview_score() {
			return this.review_score;
		}

		public String review_content;

		public String getReview_content() {
			return this.review_content;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ETL_TALEND_STUDIO_EXAMPLE_extract_json.length) {
					if (length < 1024 && commonByteArray_ETL_TALEND_STUDIO_EXAMPLE_extract_json.length == 0) {
						commonByteArray_ETL_TALEND_STUDIO_EXAMPLE_extract_json = new byte[1024];
					} else {
						commonByteArray_ETL_TALEND_STUDIO_EXAMPLE_extract_json = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ETL_TALEND_STUDIO_EXAMPLE_extract_json, 0, length);
				strReturn = new String(commonByteArray_ETL_TALEND_STUDIO_EXAMPLE_extract_json, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ETL_TALEND_STUDIO_EXAMPLE_extract_json) {

				try {

					int length = 0;

					this.customer_number = readString(dis);

					this.order_id = readString(dis);

					this.product_id = readString(dis);

					this.price = readString(dis);

					this.review_id = readString(dis);

					this.review_score = readString(dis);

					this.review_content = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.customer_number, dos);

				// String

				writeString(this.order_id, dos);

				// String

				writeString(this.product_id, dos);

				// String

				writeString(this.price, dos);

				// String

				writeString(this.review_id, dos);

				// String

				writeString(this.review_score, dos);

				// String

				writeString(this.review_content, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("customer_number=" + customer_number);
			sb.append(",order_id=" + order_id);
			sb.append(",product_id=" + product_id);
			sb.append(",price=" + price);
			sb.append(",review_id=" + review_id);
			sb.append(",review_score=" + review_score);
			sb.append(",review_content=" + review_content);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(order_infoStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class cust_orderStruct implements routines.system.IPersistableRow<cust_orderStruct> {
		final static byte[] commonByteArrayLock_ETL_TALEND_STUDIO_EXAMPLE_extract_json = new byte[0];
		static byte[] commonByteArray_ETL_TALEND_STUDIO_EXAMPLE_extract_json = new byte[0];

		public String customer_unique_id;

		public String getCustomer_unique_id() {
			return this.customer_unique_id;
		}

		public String order_id;

		public String getOrder_id() {
			return this.order_id;
		}

		public String customer_id;

		public String getCustomer_id() {
			return this.customer_id;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ETL_TALEND_STUDIO_EXAMPLE_extract_json.length) {
					if (length < 1024 && commonByteArray_ETL_TALEND_STUDIO_EXAMPLE_extract_json.length == 0) {
						commonByteArray_ETL_TALEND_STUDIO_EXAMPLE_extract_json = new byte[1024];
					} else {
						commonByteArray_ETL_TALEND_STUDIO_EXAMPLE_extract_json = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ETL_TALEND_STUDIO_EXAMPLE_extract_json, 0, length);
				strReturn = new String(commonByteArray_ETL_TALEND_STUDIO_EXAMPLE_extract_json, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ETL_TALEND_STUDIO_EXAMPLE_extract_json) {

				try {

					int length = 0;

					this.customer_unique_id = readString(dis);

					this.order_id = readString(dis);

					this.customer_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.customer_unique_id, dos);

				// String

				writeString(this.order_id, dos);

				// String

				writeString(this.customer_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("customer_unique_id=" + customer_unique_id);
			sb.append(",order_id=" + order_id);
			sb.append(",customer_id=" + customer_id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(cust_orderStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_ETL_TALEND_STUDIO_EXAMPLE_extract_json = new byte[0];
		static byte[] commonByteArray_ETL_TALEND_STUDIO_EXAMPLE_extract_json = new byte[0];

		public String customer_id;

		public String getCustomer_id() {
			return this.customer_id;
		}

		public String customer_unique_id;

		public String getCustomer_unique_id() {
			return this.customer_unique_id;
		}

		public String customer_zip_code_prefix;

		public String getCustomer_zip_code_prefix() {
			return this.customer_zip_code_prefix;
		}

		public String customer_city;

		public String getCustomer_city() {
			return this.customer_city;
		}

		public String customer_state;

		public String getCustomer_state() {
			return this.customer_state;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ETL_TALEND_STUDIO_EXAMPLE_extract_json.length) {
					if (length < 1024 && commonByteArray_ETL_TALEND_STUDIO_EXAMPLE_extract_json.length == 0) {
						commonByteArray_ETL_TALEND_STUDIO_EXAMPLE_extract_json = new byte[1024];
					} else {
						commonByteArray_ETL_TALEND_STUDIO_EXAMPLE_extract_json = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ETL_TALEND_STUDIO_EXAMPLE_extract_json, 0, length);
				strReturn = new String(commonByteArray_ETL_TALEND_STUDIO_EXAMPLE_extract_json, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ETL_TALEND_STUDIO_EXAMPLE_extract_json) {

				try {

					int length = 0;

					this.customer_id = readString(dis);

					this.customer_unique_id = readString(dis);

					this.customer_zip_code_prefix = readString(dis);

					this.customer_city = readString(dis);

					this.customer_state = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.customer_id, dos);

				// String

				writeString(this.customer_unique_id, dos);

				// String

				writeString(this.customer_zip_code_prefix, dos);

				// String

				writeString(this.customer_city, dos);

				// String

				writeString(this.customer_state, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("customer_id=" + customer_id);
			sb.append(",customer_unique_id=" + customer_unique_id);
			sb.append(",customer_zip_code_prefix=" + customer_zip_code_prefix);
			sb.append(",customer_city=" + customer_city);
			sb.append(",customer_state=" + customer_state);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_ETL_TALEND_STUDIO_EXAMPLE_extract_json = new byte[0];
		static byte[] commonByteArray_ETL_TALEND_STUDIO_EXAMPLE_extract_json = new byte[0];

		public String customer_unique_id;

		public String getCustomer_unique_id() {
			return this.customer_unique_id;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ETL_TALEND_STUDIO_EXAMPLE_extract_json.length) {
					if (length < 1024 && commonByteArray_ETL_TALEND_STUDIO_EXAMPLE_extract_json.length == 0) {
						commonByteArray_ETL_TALEND_STUDIO_EXAMPLE_extract_json = new byte[1024];
					} else {
						commonByteArray_ETL_TALEND_STUDIO_EXAMPLE_extract_json = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ETL_TALEND_STUDIO_EXAMPLE_extract_json, 0, length);
				strReturn = new String(commonByteArray_ETL_TALEND_STUDIO_EXAMPLE_extract_json, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ETL_TALEND_STUDIO_EXAMPLE_extract_json) {

				try {

					int length = 0;

					this.customer_unique_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.customer_unique_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("customer_unique_id=" + customer_unique_id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_1Struct
			implements routines.system.IPersistableRow<after_tFileInputDelimited_1Struct> {
		final static byte[] commonByteArrayLock_ETL_TALEND_STUDIO_EXAMPLE_extract_json = new byte[0];
		static byte[] commonByteArray_ETL_TALEND_STUDIO_EXAMPLE_extract_json = new byte[0];

		public String customer_unique_id;

		public String getCustomer_unique_id() {
			return this.customer_unique_id;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ETL_TALEND_STUDIO_EXAMPLE_extract_json.length) {
					if (length < 1024 && commonByteArray_ETL_TALEND_STUDIO_EXAMPLE_extract_json.length == 0) {
						commonByteArray_ETL_TALEND_STUDIO_EXAMPLE_extract_json = new byte[1024];
					} else {
						commonByteArray_ETL_TALEND_STUDIO_EXAMPLE_extract_json = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ETL_TALEND_STUDIO_EXAMPLE_extract_json, 0, length);
				strReturn = new String(commonByteArray_ETL_TALEND_STUDIO_EXAMPLE_extract_json, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ETL_TALEND_STUDIO_EXAMPLE_extract_json) {

				try {

					int length = 0;

					this.customer_unique_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.customer_unique_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("customer_unique_id=" + customer_unique_id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tDBInput_2Process(globalMap);
				tDBInput_3Process(globalMap);
				tDBInput_4Process(globalMap);

				row1Struct row1 = new row1Struct();
				row2Struct row2 = new row2Struct();
				cust_orderStruct cust_order = new cust_orderStruct();
				cust_noStruct cust_no = new cust_noStruct();
				row7Struct row7 = new row7Struct();
				order_infoStruct order_info = new order_infoStruct();
				row8Struct row8 = new row8Struct();

				/**
				 * [tFlowToIterate_1 begin ] start
				 */

				int NB_ITERATE_tDBInput_1 = 0; // for statistics

				ok_Hash.put("tFlowToIterate_1", false);
				start_Hash.put("tFlowToIterate_1", System.currentTimeMillis());

				currentComponent = "tFlowToIterate_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tFlowToIterate_1 = 0;

				int nb_line_tFlowToIterate_1 = 0;
				int counter_tFlowToIterate_1 = 0;

				/**
				 * [tFlowToIterate_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				int footer_tFileInputDelimited_1 = 0;
				int totalLinetFileInputDelimited_1 = 0;
				int limittFileInputDelimited_1 = -1;
				int lastLinetFileInputDelimited_1 = -1;

				char fieldSeparator_tFileInputDelimited_1[] = null;

				// support passing value (property: Field Separator) by 'context.fs' or
				// 'globalMap.get("fs")'.
				if (((String) ",").length() > 0) {
					fieldSeparator_tFileInputDelimited_1 = ((String) ",").toCharArray();
				} else {
					throw new IllegalArgumentException("Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_1[] = null;

				// support passing value (property: Row Separator) by 'context.rs' or
				// 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_1 = ((String) "\n").toCharArray();
				} else {
					throw new IllegalArgumentException("Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_1 = /** Start field tFileInputDelimited_1:FILENAME */
						context.output + TalendDate.formatDate("yyyyMMdd", TalendDate.getCurrentDate()) + "\\"
								+ TalendDate.formatDate("yyyyMMdd", TalendDate.getCurrentDate())
								+ ".csv"/** End field tFileInputDelimited_1:FILENAME */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_1 = null;

				try {

					String[] rowtFileInputDelimited_1 = null;
					int currentLinetFileInputDelimited_1 = 0;
					int outputLinetFileInputDelimited_1 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_1 = 0;
							if (footer_value_tFileInputDelimited_1 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_1,
									fieldSeparator_tFileInputDelimited_1[0], "ISO-8859-15");
						} else {
							csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(new java.io.InputStreamReader(
											new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_1)),
											"ISO-8859-15")),
									fieldSeparator_tFileInputDelimited_1[0]);
						}

						csvReadertFileInputDelimited_1.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_1[0] != '\r'))
							csvReadertFileInputDelimited_1.setLineEnd("" + rowSeparator_tFileInputDelimited_1[0]);

						csvReadertFileInputDelimited_1.setQuoteChar('"');

						csvReadertFileInputDelimited_1.setEscapeChar(csvReadertFileInputDelimited_1.getQuoteChar());

						if (footer_tFileInputDelimited_1 > 0) {
							for (totalLinetFileInputDelimited_1 = 0; totalLinetFileInputDelimited_1 < 1; totalLinetFileInputDelimited_1++) {
								csvReadertFileInputDelimited_1.readNext();
							}
							csvReadertFileInputDelimited_1.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_1.readNext()) {

								rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1.getValues();
								if (!(rowtFileInputDelimited_1.length == 1
										&& ("\015").equals(rowtFileInputDelimited_1[0]))) {// empty line when row
																							// separator is '\n'

									totalLinetFileInputDelimited_1++;

								}

							}
							int lastLineTemptFileInputDelimited_1 = totalLinetFileInputDelimited_1
									- footer_tFileInputDelimited_1 < 0 ? 0
											: totalLinetFileInputDelimited_1 - footer_tFileInputDelimited_1;
							if (lastLinetFileInputDelimited_1 > 0) {
								lastLinetFileInputDelimited_1 = lastLinetFileInputDelimited_1 < lastLineTemptFileInputDelimited_1
										? lastLinetFileInputDelimited_1
										: lastLineTemptFileInputDelimited_1;
							} else {
								lastLinetFileInputDelimited_1 = lastLineTemptFileInputDelimited_1;
							}

							csvReadertFileInputDelimited_1.close();
							if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_1,
										fieldSeparator_tFileInputDelimited_1[0], "ISO-8859-15");
							} else {
								csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(new java.io.InputStreamReader(
												new java.io.FileInputStream(
														String.valueOf(filename_tFileInputDelimited_1)),
												"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_1[0]);
							}
							csvReadertFileInputDelimited_1.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_1[0] != '\r'))
								csvReadertFileInputDelimited_1.setLineEnd("" + rowSeparator_tFileInputDelimited_1[0]);

							csvReadertFileInputDelimited_1.setQuoteChar('"');

							csvReadertFileInputDelimited_1.setEscapeChar(csvReadertFileInputDelimited_1.getQuoteChar());

						}

						if (limittFileInputDelimited_1 != 0) {
							for (currentLinetFileInputDelimited_1 = 0; currentLinetFileInputDelimited_1 < 1; currentLinetFileInputDelimited_1++) {
								csvReadertFileInputDelimited_1.readNext();
							}
						}
						csvReadertFileInputDelimited_1.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					} // TD110 end

					while (limittFileInputDelimited_1 != 0 && csvReadertFileInputDelimited_1 != null
							&& csvReadertFileInputDelimited_1.readNext()) {
						rowstate_tFileInputDelimited_1.reset();

						rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1.getValues();

						if (rowtFileInputDelimited_1.length == 1 && ("\015").equals(rowtFileInputDelimited_1[0])) {// empty
																													// line
																													// when
																													// row
																													// separator
																													// is
																													// '\n'
							continue;
						}

						currentLinetFileInputDelimited_1++;

						if (lastLinetFileInputDelimited_1 > -1
								&& currentLinetFileInputDelimited_1 > lastLinetFileInputDelimited_1) {
							break;
						}
						outputLinetFileInputDelimited_1++;
						if (limittFileInputDelimited_1 > 0
								&& outputLinetFileInputDelimited_1 > limittFileInputDelimited_1) {
							break;
						}

						row1 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row1 = new row1Struct();
						try {

							char fieldSeparator_tFileInputDelimited_1_ListType[] = null;
							// support passing value (property: Field Separator) by 'context.fs' or
							// 'globalMap.get("fs")'.
							if (((String) ",").length() > 0) {
								fieldSeparator_tFileInputDelimited_1_ListType = ((String) ",").toCharArray();
							} else {
								throw new IllegalArgumentException("Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_1.length == 1 && ("\015").equals(rowtFileInputDelimited_1[0])) {// empty
																														// line
																														// when
																														// row
																														// separator
																														// is
																														// '\n'

								row1.customer_unique_id = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_1 = 0; // Column Index

								columnIndexWithD_tFileInputDelimited_1 = 0;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.customer_unique_id = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.customer_unique_id = null;

								}

							}

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row1 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */

						/**
						 * [tFileInputDelimited_1 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_begin ] stop
						 */
// Start of branch "row1"
						if (row1 != null) {

							/**
							 * [tFlowToIterate_1 main ] start
							 */

							currentComponent = "tFlowToIterate_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row1");
							}

							globalMap.put("customer_id", row1.customer_unique_id);
							nb_line_tFlowToIterate_1++;
							counter_tFlowToIterate_1++;
							globalMap.put("tFlowToIterate_1_CURRENT_ITERATION", counter_tFlowToIterate_1);

							tos_count_tFlowToIterate_1++;

							/**
							 * [tFlowToIterate_1 main ] stop
							 */

							/**
							 * [tFlowToIterate_1 process_data_begin ] start
							 */

							currentComponent = "tFlowToIterate_1";

							/**
							 * [tFlowToIterate_1 process_data_begin ] stop
							 */
							NB_ITERATE_tDBInput_1++;

							if (execStat) {
								runStat.updateStatOnConnection("cust_no", 3, 0);
							}

							if (execStat) {
								runStat.updateStatOnConnection("row8", 3, 0);
							}

							if (execStat) {
								runStat.updateStatOnConnection("row2", 3, 0);
							}

							if (execStat) {
								runStat.updateStatOnConnection("row7", 3, 0);
							}

							if (execStat) {
								runStat.updateStatOnConnection("cust_order", 3, 0);
							}

							if (execStat) {
								runStat.updateStatOnConnection("order_info", 3, 0);
							}

							if (execStat) {
								runStat.updateStatOnConnection("iterate1", 1, "exec" + NB_ITERATE_tDBInput_1);
								// Thread.sleep(1000);
							}

							/**
							 * [tJSONDocOutput_1 begin ] start
							 */

							ok_Hash.put("tJSONDocOutput_1", false);
							start_Hash.put("tJSONDocOutput_1", System.currentTimeMillis());

							currentComponent = "tJSONDocOutput_1";

							if (execStat) {
								runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row7");
							}

							int tos_count_tJSONDocOutput_1 = 0;

							globalMap.remove("tJSONDocOutput_1_CURRENT_NODE");
							globalMap.remove("tJSONDocOutput_1_CURRENT_PATH");
							globalMap.put("tJSONDocOutput_1_NB_LINE", 0);
							java.util.Map<Object, com.fasterxml.jackson.databind.JsonNode> keyMap_tJSONDocOutput_1 = new java.util.HashMap<Object, com.fasterxml.jackson.databind.JsonNode>();
							globalMap.put("keyMap_tJSONDocOutput_1", keyMap_tJSONDocOutput_1);
							de.jlo.talendcomp.json.JsonDocument tJSONDocOutput_1 = (de.jlo.talendcomp.json.JsonDocument) globalMap
									.get("tJSONDocOpen_1");
							if (tJSONDocOutput_1 != null && globalMap.get("tJSONDocOpen_1_CURRENT_NODE") != null
									&& globalMap.get("entryNode_tJSONDocOutput_1") == null && false == false) {
								try {
									globalMap.put("tJSONDocOutput_1", tJSONDocOutput_1);
									String jsonPath = "$";
									// build path to enhance the error messages
									String path = null;
									if (jsonPath != null && jsonPath.isEmpty() == false) {
										if (jsonPath.startsWith("$")) {
											path = jsonPath;
										} else if (".".equals(jsonPath)) {
											path = (String) globalMap.get("tJSONDocOpen_1_CURRENT_PATH");
										} else {
											path = (String) globalMap.get("tJSONDocOpen_1_CURRENT_PATH") + "."
													+ jsonPath;
										}
									} else {
										path = (String) globalMap.get("tJSONDocOpen_1_CURRENT_PATH");
									}
									globalMap.put("tJSONDocOutput_1_CURRENT_PATH", path);
									tJSONDocOutput_1.setCurrentPath(path);
									// get the parent object we have to dock on
									com.fasterxml.jackson.databind.JsonNode entryNode_tJSONDocOutput_1 = (com.fasterxml.jackson.databind.JsonNode) globalMap
											.get("tJSONDocOpen_1_CURRENT_NODE");
									// take care the path will be created as array
									if (".".equals(jsonPath) == false) {
										if (jsonPath == null) {
											jsonPath = "[" + Integer.MAX_VALUE + "]";
										} else if (jsonPath.endsWith("]") == false) {
											jsonPath = jsonPath + "[" + Integer.MAX_VALUE + "]"; // take care we never
																									// hit an existing
																									// array element
											// this way we get the array itself as result of getNode(...)
										}
									}
									com.fasterxml.jackson.databind.JsonNode node = tJSONDocOutput_1
											.getNode(entryNode_tJSONDocOutput_1, jsonPath, true);
									com.fasterxml.jackson.databind.node.ArrayNode parentNode_tJSONDocOutput_1 = null;
									if (node instanceof com.fasterxml.jackson.databind.node.ArrayNode) {
										parentNode_tJSONDocOutput_1 = (com.fasterxml.jackson.databind.node.ArrayNode) node;
									} else if (node instanceof com.fasterxml.jackson.databind.node.ObjectNode) {
										throw new Exception(path
												+ ": Actually an ArrayNode is expected, but there is already an ObjectNode at the path: "
												+ jsonPath + ". Got node: " + node);
									} else {
										throw new Exception(path + ": Actually an ArrayNode is expected, but there is "
												+ node + " at the path: " + jsonPath + ". Got node: " + node);
									}
									globalMap.put("parent_node_tJSONDocOutput_1", parentNode_tJSONDocOutput_1);
									globalMap.put("entryNode_tJSONDocOutput_1", entryNode_tJSONDocOutput_1);
									globalMap.put("tJSONDocOutput_1_NB_LINE", 0);
								} catch (Exception e) {
									globalMap.put("tJSONDocOutput_1_ERROR_MESSAGE", e.getMessage());
									throw e;
								}
							}

							/**
							 * [tJSONDocOutput_1 begin ] stop
							 */

							/**
							 * [tUniqRow_1 begin ] start
							 */

							ok_Hash.put("tUniqRow_1", false);
							start_Hash.put("tUniqRow_1", System.currentTimeMillis());

							currentComponent = "tUniqRow_1";

							if (execStat) {
								runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "cust_no");
							}

							int tos_count_tUniqRow_1 = 0;

							class KeyStruct_tUniqRow_1 {

								private static final int DEFAULT_HASHCODE = 1;
								private static final int PRIME = 31;
								private int hashCode = DEFAULT_HASHCODE;
								public boolean hashCodeDirty = true;

								String customer_number;

								@Override
								public int hashCode() {
									if (this.hashCodeDirty) {
										final int prime = PRIME;
										int result = DEFAULT_HASHCODE;

										result = prime * result + ((this.customer_number == null) ? 0
												: this.customer_number.hashCode());

										this.hashCode = result;
										this.hashCodeDirty = false;
									}
									return this.hashCode;
								}

								@Override
								public boolean equals(Object obj) {
									if (this == obj)
										return true;
									if (obj == null)
										return false;
									if (getClass() != obj.getClass())
										return false;
									final KeyStruct_tUniqRow_1 other = (KeyStruct_tUniqRow_1) obj;

									if (this.customer_number == null) {
										if (other.customer_number != null)
											return false;

									} else if (!this.customer_number.equals(other.customer_number))

										return false;

									return true;
								}

							}

							int nb_uniques_tUniqRow_1 = 0;
							int nb_duplicates_tUniqRow_1 = 0;
							KeyStruct_tUniqRow_1 finder_tUniqRow_1 = new KeyStruct_tUniqRow_1();
							java.util.Set<KeyStruct_tUniqRow_1> keystUniqRow_1 = new java.util.HashSet<KeyStruct_tUniqRow_1>();

							/**
							 * [tUniqRow_1 begin ] stop
							 */

							/**
							 * [tJSONDocOutput_2 begin ] start
							 */

							ok_Hash.put("tJSONDocOutput_2", false);
							start_Hash.put("tJSONDocOutput_2", System.currentTimeMillis());

							currentComponent = "tJSONDocOutput_2";

							if (execStat) {
								runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row8");
							}

							int tos_count_tJSONDocOutput_2 = 0;

							globalMap.remove("tJSONDocOutput_2_CURRENT_NODE");
							globalMap.remove("tJSONDocOutput_2_CURRENT_PATH");
							globalMap.put("tJSONDocOutput_2_NB_LINE", 0);
							java.util.Map<Object, com.fasterxml.jackson.databind.JsonNode> keyMap_tJSONDocOutput_2 = new java.util.HashMap<Object, com.fasterxml.jackson.databind.JsonNode>();
							globalMap.put("keyMap_tJSONDocOutput_2", keyMap_tJSONDocOutput_2);
							de.jlo.talendcomp.json.JsonDocument tJSONDocOutput_2 = (de.jlo.talendcomp.json.JsonDocument) globalMap
									.get("tJSONDocOutput_1");
							if (tJSONDocOutput_2 != null && globalMap.get("tJSONDocOutput_1_CURRENT_NODE") != null
									&& globalMap.get("entryNode_tJSONDocOutput_2") == null && false == false) {
								try {
									globalMap.put("tJSONDocOutput_2", tJSONDocOutput_2);
									String jsonPath = "oder_info";
									// build path to enhance the error messages
									String path = null;
									if (jsonPath != null && jsonPath.isEmpty() == false) {
										if (jsonPath.startsWith("$")) {
											path = jsonPath;
										} else if (".".equals(jsonPath)) {
											path = (String) globalMap.get("tJSONDocOutput_1_CURRENT_PATH");
										} else {
											path = (String) globalMap.get("tJSONDocOutput_1_CURRENT_PATH") + "."
													+ jsonPath;
										}
									} else {
										path = (String) globalMap.get("tJSONDocOutput_1_CURRENT_PATH");
									}
									globalMap.put("tJSONDocOutput_2_CURRENT_PATH", path);
									tJSONDocOutput_2.setCurrentPath(path);
									// get the parent object we have to dock on
									com.fasterxml.jackson.databind.JsonNode entryNode_tJSONDocOutput_2 = (com.fasterxml.jackson.databind.JsonNode) globalMap
											.get("tJSONDocOutput_1_CURRENT_NODE");
									// take care the path will be created as array
									if (".".equals(jsonPath) == false) {
										if (jsonPath == null) {
											jsonPath = "[" + Integer.MAX_VALUE + "]";
										} else if (jsonPath.endsWith("]") == false) {
											jsonPath = jsonPath + "[" + Integer.MAX_VALUE + "]"; // take care we never
																									// hit an existing
																									// array element
											// this way we get the array itself as result of getNode(...)
										}
									}
									com.fasterxml.jackson.databind.JsonNode node = tJSONDocOutput_2
											.getNode(entryNode_tJSONDocOutput_2, jsonPath, true);
									com.fasterxml.jackson.databind.node.ArrayNode parentNode_tJSONDocOutput_2 = null;
									if (node instanceof com.fasterxml.jackson.databind.node.ArrayNode) {
										parentNode_tJSONDocOutput_2 = (com.fasterxml.jackson.databind.node.ArrayNode) node;
									} else if (node instanceof com.fasterxml.jackson.databind.node.ObjectNode) {
										throw new Exception(path
												+ ": Actually an ArrayNode is expected, but there is already an ObjectNode at the path: "
												+ jsonPath + ". Got node: " + node);
									} else {
										throw new Exception(path + ": Actually an ArrayNode is expected, but there is "
												+ node + " at the path: " + jsonPath + ". Got node: " + node);
									}
									globalMap.put("parent_node_tJSONDocOutput_2", parentNode_tJSONDocOutput_2);
									globalMap.put("entryNode_tJSONDocOutput_2", entryNode_tJSONDocOutput_2);
									globalMap.put("tJSONDocOutput_2_NB_LINE", 0);
								} catch (Exception e) {
									globalMap.put("tJSONDocOutput_2_ERROR_MESSAGE", e.getMessage());
									throw e;
								}
							}

							/**
							 * [tJSONDocOutput_2 begin ] stop
							 */

							/**
							 * [tUniqRow_2 begin ] start
							 */

							ok_Hash.put("tUniqRow_2", false);
							start_Hash.put("tUniqRow_2", System.currentTimeMillis());

							currentComponent = "tUniqRow_2";

							if (execStat) {
								runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "order_info");
							}

							int tos_count_tUniqRow_2 = 0;

							int nb_uniques_tUniqRow_2 = 0;
							int nb_duplicates_tUniqRow_2 = 0;

							/**
							 * [tUniqRow_2 begin ] stop
							 */

							/**
							 * [tMap_2 begin ] start
							 */

							ok_Hash.put("tMap_2", false);
							start_Hash.put("tMap_2", System.currentTimeMillis());

							currentComponent = "tMap_2";

							if (execStat) {
								runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "cust_order");
							}

							int tos_count_tMap_2 = 0;

// ###############################
// # Lookup's keys initialization

							org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) globalMap
									.get("tHash_Lookup_row3"));

							row3Struct row3HashKey = new row3Struct();
							row3Struct row3Default = new row3Struct();

							org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) globalMap
									.get("tHash_Lookup_row5"));

							row5Struct row5HashKey = new row5Struct();
							row5Struct row5Default = new row5Struct();
// ###############################        

// ###############################
// # Vars initialization
							class Var__tMap_2__Struct {
							}
							Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
							cust_noStruct cust_no_tmp = new cust_noStruct();
							order_infoStruct order_info_tmp = new order_infoStruct();
// ###############################

							/**
							 * [tMap_2 begin ] stop
							 */

							/**
							 * [tMap_1 begin ] start
							 */

							ok_Hash.put("tMap_1", false);
							start_Hash.put("tMap_1", System.currentTimeMillis());

							currentComponent = "tMap_1";

							if (execStat) {
								runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
							}

							int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization

							org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) globalMap
									.get("tHash_Lookup_row4"));

							row4Struct row4HashKey = new row4Struct();
							row4Struct row4Default = new row4Struct();
// ###############################        

// ###############################
// # Vars initialization
							class Var__tMap_1__Struct {
							}
							Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
							cust_orderStruct cust_order_tmp = new cust_orderStruct();
// ###############################

							/**
							 * [tMap_1 begin ] stop
							 */

							/**
							 * [tDBInput_1 begin ] start
							 */

							ok_Hash.put("tDBInput_1", false);
							start_Hash.put("tDBInput_1", System.currentTimeMillis());

							currentComponent = "tDBInput_1";

							int tos_count_tDBInput_1 = 0;

							java.util.Calendar calendar_tDBInput_1 = java.util.Calendar.getInstance();
							calendar_tDBInput_1.set(0, 0, 0, 0, 0, 0);
							java.util.Date year0_tDBInput_1 = calendar_tDBInput_1.getTime();
							int nb_line_tDBInput_1 = 0;
							java.sql.Connection conn_tDBInput_1 = null;
							conn_tDBInput_1 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

							java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

							String dbquery_tDBInput_1 = "SELECT \n  `olist_customers_dataset`.`customer_id`, \n  `olist_customers_dataset`.`customer_unique_id`, \n  `olist_custome"
									+ "rs_dataset`.`customer_zip_code_prefix`, \n  `olist_customers_dataset`.`customer_city`, \n  `olist_customers_dataset`.`cust"
									+ "omer_state`\nFROM `olist_customers_dataset`\nWHERE `olist_customers_dataset`.`customer_unique_id`= "
									+ "\'" + ((String) globalMap.get("customer_id")) + "'";

							globalMap.put("tDBInput_1_QUERY", dbquery_tDBInput_1);
							java.sql.ResultSet rs_tDBInput_1 = null;

							try {
								rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
								java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
								int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

								String tmpContent_tDBInput_1 = null;

								while (rs_tDBInput_1.next()) {
									nb_line_tDBInput_1++;

									if (colQtyInRs_tDBInput_1 < 1) {
										row2.customer_id = null;
									} else {

										row2.customer_id = routines.system.JDBCUtil.getString(rs_tDBInput_1, 1, false);
									}
									if (colQtyInRs_tDBInput_1 < 2) {
										row2.customer_unique_id = null;
									} else {

										row2.customer_unique_id = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2,
												false);
									}
									if (colQtyInRs_tDBInput_1 < 3) {
										row2.customer_zip_code_prefix = null;
									} else {

										row2.customer_zip_code_prefix = routines.system.JDBCUtil
												.getString(rs_tDBInput_1, 3, false);
									}
									if (colQtyInRs_tDBInput_1 < 4) {
										row2.customer_city = null;
									} else {

										row2.customer_city = routines.system.JDBCUtil.getString(rs_tDBInput_1, 4,
												false);
									}
									if (colQtyInRs_tDBInput_1 < 5) {
										row2.customer_state = null;
									} else {

										row2.customer_state = routines.system.JDBCUtil.getString(rs_tDBInput_1, 5,
												false);
									}

									/**
									 * [tDBInput_1 begin ] stop
									 */

									/**
									 * [tDBInput_1 main ] start
									 */

									currentComponent = "tDBInput_1";

									tos_count_tDBInput_1++;

									/**
									 * [tDBInput_1 main ] stop
									 */

									/**
									 * [tDBInput_1 process_data_begin ] start
									 */

									currentComponent = "tDBInput_1";

									/**
									 * [tDBInput_1 process_data_begin ] stop
									 */

									/**
									 * [tMap_1 main ] start
									 */

									currentComponent = "tMap_1";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1, "row2");
									}

									boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

									// ###############################
									// # Input tables (lookups)
									boolean rejectedInnerJoin_tMap_1 = false;
									boolean mainRowRejected_tMap_1 = false;

									///////////////////////////////////////////////
									// Starting Lookup Table "row4"
									///////////////////////////////////////////////

									boolean forceLooprow4 = false;

									row4Struct row4ObjectFromLookup = null;

									if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

										hasCasePrimitiveKeyWithNull_tMap_1 = false;

										row4HashKey.customer_id = row2.customer_id;

										row4HashKey.hashCodeDirty = true;

										tHash_Lookup_row4.lookup(row4HashKey);

										if (!tHash_Lookup_row4.hasNext()) { // G_TM_M_090

											rejectedInnerJoin_tMap_1 = true;

											forceLooprow4 = true;

										} // G_TM_M_090

									} // G_TM_M_020

									else { // G 20 - G 21
										forceLooprow4 = true;
									} // G 21

									row4Struct row4 = null;

									while ((tHash_Lookup_row4 != null && tHash_Lookup_row4.hasNext())
											|| forceLooprow4) { // G_TM_M_043

										// CALL close loop of lookup 'row4'

										row4Struct fromLookup_row4 = null;
										row4 = row4Default;

										if (!forceLooprow4) { // G 46

											fromLookup_row4 = tHash_Lookup_row4.next();

											if (fromLookup_row4 != null) {
												row4 = fromLookup_row4;
											}

										} // G 46

										forceLooprow4 = false;

										// ###############################
										{ // start of Var scope

											// ###############################
											// # Vars tables

											Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
											// ###############################
											// # Output tables

											cust_order = null;

											if (!rejectedInnerJoin_tMap_1) {

// # Output table : 'cust_order'
												cust_order_tmp.customer_unique_id = row2.customer_unique_id;
												cust_order_tmp.order_id = row4.order_id;
												cust_order_tmp.customer_id = row4.customer_id;
												cust_order = cust_order_tmp;
											} // closing inner join bracket (2)
// ###############################

										} // end of Var scope

										rejectedInnerJoin_tMap_1 = false;

										tos_count_tMap_1++;

										/**
										 * [tMap_1 main ] stop
										 */

										/**
										 * [tMap_1 process_data_begin ] start
										 */

										currentComponent = "tMap_1";

										/**
										 * [tMap_1 process_data_begin ] stop
										 */
// Start of branch "cust_order"
										if (cust_order != null) {

											/**
											 * [tMap_2 main ] start
											 */

											currentComponent = "tMap_2";

											if (execStat) {
												runStat.updateStatOnConnection(iterateId, 1, 1, "cust_order");
											}

											boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

											// ###############################
											// # Input tables (lookups)
											boolean rejectedInnerJoin_tMap_2 = false;
											boolean mainRowRejected_tMap_2 = false;

											///////////////////////////////////////////////
											// Starting Lookup Table "row3"
											///////////////////////////////////////////////

											boolean forceLooprow3 = false;

											row3Struct row3ObjectFromLookup = null;

											if (!rejectedInnerJoin_tMap_2) { // G_TM_M_020

												hasCasePrimitiveKeyWithNull_tMap_2 = false;

												row3HashKey.order_id = cust_order.order_id;

												row3HashKey.hashCodeDirty = true;

												tHash_Lookup_row3.lookup(row3HashKey);

												if (!tHash_Lookup_row3.hasNext()) { // G_TM_M_090

													rejectedInnerJoin_tMap_2 = true;

													forceLooprow3 = true;

												} // G_TM_M_090

											} // G_TM_M_020

											else { // G 20 - G 21
												forceLooprow3 = true;
											} // G 21

											row3Struct row3 = null;

											while ((tHash_Lookup_row3 != null && tHash_Lookup_row3.hasNext())
													|| forceLooprow3) { // G_TM_M_043

												// CALL close loop of lookup 'row3'

												row3Struct fromLookup_row3 = null;
												row3 = row3Default;

												if (!forceLooprow3) { // G 46

													fromLookup_row3 = tHash_Lookup_row3.next();

													if (fromLookup_row3 != null) {
														row3 = fromLookup_row3;
													}

												} // G 46

												forceLooprow3 = false;

												///////////////////////////////////////////////
												// Starting Lookup Table "row5"
												///////////////////////////////////////////////

												boolean forceLooprow5 = false;

												row5Struct row5ObjectFromLookup = null;

												if (!rejectedInnerJoin_tMap_2) { // G_TM_M_020

													hasCasePrimitiveKeyWithNull_tMap_2 = false;

													row5HashKey.order_id = cust_order.order_id;

													row5HashKey.hashCodeDirty = true;

													tHash_Lookup_row5.lookup(row5HashKey);

													if (!tHash_Lookup_row5.hasNext()) { // G_TM_M_090

														rejectedInnerJoin_tMap_2 = true;

														forceLooprow5 = true;

													} // G_TM_M_090

												} // G_TM_M_020

												else { // G 20 - G 21
													forceLooprow5 = true;
												} // G 21

												row5Struct row5 = null;

												while ((tHash_Lookup_row5 != null && tHash_Lookup_row5.hasNext())
														|| forceLooprow5) { // G_TM_M_043

													// CALL close loop of lookup 'row5'

													row5Struct fromLookup_row5 = null;
													row5 = row5Default;

													if (!forceLooprow5) { // G 46

														fromLookup_row5 = tHash_Lookup_row5.next();

														if (fromLookup_row5 != null) {
															row5 = fromLookup_row5;
														}

													} // G 46

													forceLooprow5 = false;

													// ###############################
													{ // start of Var scope

														// ###############################
														// # Vars tables

														Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
														// ###############################
														// # Output tables

														cust_no = null;
														order_info = null;

														if (!rejectedInnerJoin_tMap_2) {

// # Output table : 'cust_no'
															cust_no_tmp.customer_number = cust_order.customer_unique_id;
															cust_no = cust_no_tmp;

// # Output table : 'order_info'
															order_info_tmp.customer_number = cust_order.customer_unique_id;
															order_info_tmp.order_id = row3.order_id;
															order_info_tmp.product_id = row3.product_id;
															order_info_tmp.price = row3.price;
															order_info_tmp.review_id = row5.review_id;
															order_info_tmp.review_score = row5.review_score;
															order_info_tmp.review_content = row5.review_comment_title
																	+ ":" + row5.review_comment_message;
															order_info = order_info_tmp;
														} // closing inner join bracket (2)
// ###############################

													} // end of Var scope

													rejectedInnerJoin_tMap_2 = false;

													tos_count_tMap_2++;

													/**
													 * [tMap_2 main ] stop
													 */

													/**
													 * [tMap_2 process_data_begin ] start
													 */

													currentComponent = "tMap_2";

													/**
													 * [tMap_2 process_data_begin ] stop
													 */
// Start of branch "cust_no"
													if (cust_no != null) {

														/**
														 * [tUniqRow_1 main ] start
														 */

														currentComponent = "tUniqRow_1";

														if (execStat) {
															runStat.updateStatOnConnection(iterateId, 1, 1, "cust_no");
														}

														row7 = null;
														if (cust_no.customer_number == null) {
															finder_tUniqRow_1.customer_number = null;
														} else {
															finder_tUniqRow_1.customer_number = cust_no.customer_number
																	.toLowerCase();
														}
														finder_tUniqRow_1.hashCodeDirty = true;
														if (!keystUniqRow_1.contains(finder_tUniqRow_1)) {
															KeyStruct_tUniqRow_1 new_tUniqRow_1 = new KeyStruct_tUniqRow_1();

															if (cust_no.customer_number == null) {
																new_tUniqRow_1.customer_number = null;
															} else {
																new_tUniqRow_1.customer_number = cust_no.customer_number
																		.toLowerCase();
															}

															keystUniqRow_1.add(new_tUniqRow_1);
															if (row7 == null) {

																row7 = new row7Struct();
															}
															row7.customer_number = cust_no.customer_number;
															nb_uniques_tUniqRow_1++;
														} else {
															nb_duplicates_tUniqRow_1++;
														}

														tos_count_tUniqRow_1++;

														/**
														 * [tUniqRow_1 main ] stop
														 */

														/**
														 * [tUniqRow_1 process_data_begin ] start
														 */

														currentComponent = "tUniqRow_1";

														/**
														 * [tUniqRow_1 process_data_begin ] stop
														 */
// Start of branch "row7"
														if (row7 != null) {

															/**
															 * [tJSONDocOutput_1 main ] start
															 */

															currentComponent = "tJSONDocOutput_1";

															if (execStat) {
																runStat.updateStatOnConnection(iterateId, 1, 1, "row7");
															}

															com.fasterxml.jackson.databind.JsonNode entryNode_tJSONDocOutput_1 = (com.fasterxml.jackson.databind.JsonNode) globalMap
																	.get("tJSONDocOpen_1_CURRENT_NODE");
															if (entryNode_tJSONDocOutput_1 != null) {
																if (globalMap.get("entryNode_tJSONDocOutput_1") == null
																		|| (globalMap.get(
																				"entryNode_tJSONDocOutput_1") != entryNode_tJSONDocOutput_1)) {
																	try {
																		tJSONDocOutput_1 = (de.jlo.talendcomp.json.JsonDocument) globalMap
																				.get("tJSONDocOpen_1");
																		globalMap.put("tJSONDocOutput_1",
																				tJSONDocOutput_1);
																		// get the parent object we have to dock on
																		globalMap.put("entryNode_tJSONDocOutput_1",
																				entryNode_tJSONDocOutput_1);
																		String jsonPath = "$";
																		// build path to enhance the error messages
																		String path = null;
																		if (jsonPath != null
																				&& jsonPath.isEmpty() == false) {
																			if (jsonPath.startsWith("$")) {
																				path = jsonPath;
																			} else if (".".equals(jsonPath)) {
																				path = (String) globalMap.get(
																						"tJSONDocOpen_1_CURRENT_PATH");
																			} else {
																				path = (String) globalMap.get(
																						"tJSONDocOpen_1_CURRENT_PATH")
																						+ "." + jsonPath;
																			}
																		} else {
																			path = (String) globalMap
																					.get("tJSONDocOpen_1_CURRENT_PATH");
																		}
																		globalMap.put("tJSONDocOutput_1_CURRENT_PATH",
																				path);
																		tJSONDocOutput_1.setCurrentPath(path);
																		// take care the path will be created as array
																		if (".".equals(jsonPath) == false) {
																			if (jsonPath == null) {
																				jsonPath = "[" + Integer.MAX_VALUE
																						+ "]";
																			} else if (jsonPath
																					.endsWith("]") == false) {
																				jsonPath = jsonPath + "["
																						+ Integer.MAX_VALUE + "]"; // take
																													// care
																													// we
																													// never
																													// hit
																													// an
																													// existing
																													// array
																													// element
																				// this way we get the array itself as
																				// result of getNode(...)
																			}
																		}
																		com.fasterxml.jackson.databind.JsonNode node = tJSONDocOutput_1
																				.getNode(entryNode_tJSONDocOutput_1,
																						jsonPath, true);
																		com.fasterxml.jackson.databind.node.ArrayNode parentNode_tJSONDocOutput_1 = null;
																		if (node instanceof com.fasterxml.jackson.databind.node.ArrayNode) {
																			parentNode_tJSONDocOutput_1 = (com.fasterxml.jackson.databind.node.ArrayNode) node;
																		} else if (node instanceof com.fasterxml.jackson.databind.node.ObjectNode) {
																			throw new Exception(path
																					+ ": Actually an ArrayNode is expected, but there is already an ObjectNode at the path: "
																					+ jsonPath + ". Got node: " + node);
																		} else {
																			throw new Exception(path
																					+ ": Actually an ArrayNode is expected, but there is "
																					+ node + " at the path: " + jsonPath
																					+ ". Got node: " + node);
																		}
																		globalMap.put("parent_node_tJSONDocOutput_1",
																				parentNode_tJSONDocOutput_1);
																		globalMap.put("tJSONDocOutput_1_NB_LINE", 0);
																	} catch (Exception e) {
																		globalMap.put("tJSONDocOutput_1_ERROR_MESSAGE",
																				e.getMessage());
																		throw e;
																	}
																}
																try { // start block for tJSONDocOutput_1
																		// get the parent node
																	com.fasterxml.jackson.databind.JsonNode node = (com.fasterxml.jackson.databind.JsonNode) globalMap
																			.get("parent_node_tJSONDocOutput_1");
																	com.fasterxml.jackson.databind.node.ArrayNode parentNode = null;
																	if (node instanceof com.fasterxml.jackson.databind.node.ArrayNode) {
																		parentNode = (com.fasterxml.jackson.databind.node.ArrayNode) node;
																	} else {
																		throw new Exception(globalMap
																				.get("tJSONDocOutput_1_CURRENT_PATH")
																				+ ": Actually as parent an ArrayNode is expected, but there is already an ObjectNode from the component: "
																				+ tJSONDocOutput_1
																				+ ". Check the configuration.");
																	}
																	com.fasterxml.jackson.databind.node.ObjectNode currentNode_tJSONDocOutput_1 = parentNode
																			.addObject();
																	{
																		String fieldName = null;
																		if (fieldName == null
																				|| fieldName.trim().isEmpty()) {
																			fieldName = "customer_number";
																		}
																		tJSONDocOutput_1.setValue(
																				currentNode_tJSONDocOutput_1, fieldName,
																				row7.customer_number, false);
																	}
																	globalMap.put("tJSONDocOutput_1.customer_number",
																			row7.customer_number);
																	globalMap.put("tJSONDocOutput_1_CURRENT_NODE",
																			currentNode_tJSONDocOutput_1);
																	Integer counter = (Integer) globalMap
																			.get("tJSONDocOutput_1_NB_LINE");
																	globalMap.put("tJSONDocOutput_1_NB_LINE",
																			counter.intValue() + 1);
																} catch (Exception e) {
																	globalMap.put("tJSONDocOutput_1_ERROR_MESSAGE",
																			e.getMessage());
																	throw e;
																}
															} else {
																throw new Exception(
																		"The referenced current document from component: tJSONDocOpen_1 is null. Please check the job structur!");
															}

															tos_count_tJSONDocOutput_1++;

															/**
															 * [tJSONDocOutput_1 main ] stop
															 */

															/**
															 * [tJSONDocOutput_1 process_data_begin ] start
															 */

															currentComponent = "tJSONDocOutput_1";

															/**
															 * [tJSONDocOutput_1 process_data_begin ] stop
															 */

															/**
															 * [tJSONDocOutput_1 process_data_end ] start
															 */

															currentComponent = "tJSONDocOutput_1";

															/**
															 * [tJSONDocOutput_1 process_data_end ] stop
															 */

														} // End of branch "row7"

														/**
														 * [tUniqRow_1 process_data_end ] start
														 */

														currentComponent = "tUniqRow_1";

														/**
														 * [tUniqRow_1 process_data_end ] stop
														 */

													} // End of branch "cust_no"

// Start of branch "order_info"
													if (order_info != null) {

														/**
														 * [tUniqRow_2 main ] start
														 */

														currentComponent = "tUniqRow_2";

														if (execStat) {
															runStat.updateStatOnConnection(iterateId, 1, 1,
																	"order_info");
														}

														row8.customer_number = order_info.customer_number;
														row8.order_id = order_info.order_id;
														row8.product_id = order_info.product_id;
														row8.price = order_info.price;
														row8.review_id = order_info.review_id;
														row8.review_score = order_info.review_score;
														row8.review_content = order_info.review_content;

														tos_count_tUniqRow_2++;

														/**
														 * [tUniqRow_2 main ] stop
														 */

														/**
														 * [tUniqRow_2 process_data_begin ] start
														 */

														currentComponent = "tUniqRow_2";

														/**
														 * [tUniqRow_2 process_data_begin ] stop
														 */
// Start of branch "row8"
														if (row8 != null) {

															/**
															 * [tJSONDocOutput_2 main ] start
															 */

															currentComponent = "tJSONDocOutput_2";

															if (execStat) {
																runStat.updateStatOnConnection(iterateId, 1, 1, "row8");
															}

															com.fasterxml.jackson.databind.JsonNode entryNode_tJSONDocOutput_2 = (com.fasterxml.jackson.databind.JsonNode) globalMap
																	.get("tJSONDocOutput_1_CURRENT_NODE");
															if (entryNode_tJSONDocOutput_2 != null) {
																if (globalMap.get("entryNode_tJSONDocOutput_2") == null
																		|| (globalMap.get(
																				"entryNode_tJSONDocOutput_2") != entryNode_tJSONDocOutput_2)) {
																	try {
																		tJSONDocOutput_2 = (de.jlo.talendcomp.json.JsonDocument) globalMap
																				.get("tJSONDocOutput_1");
																		globalMap.put("tJSONDocOutput_2",
																				tJSONDocOutput_2);
																		// get the parent object we have to dock on
																		globalMap.put("entryNode_tJSONDocOutput_2",
																				entryNode_tJSONDocOutput_2);
																		String jsonPath = "oder_info";
																		// build path to enhance the error messages
																		String path = null;
																		if (jsonPath != null
																				&& jsonPath.isEmpty() == false) {
																			if (jsonPath.startsWith("$")) {
																				path = jsonPath;
																			} else if (".".equals(jsonPath)) {
																				path = (String) globalMap.get(
																						"tJSONDocOutput_1_CURRENT_PATH");
																			} else {
																				path = (String) globalMap.get(
																						"tJSONDocOutput_1_CURRENT_PATH")
																						+ "." + jsonPath;
																			}
																		} else {
																			path = (String) globalMap.get(
																					"tJSONDocOutput_1_CURRENT_PATH");
																		}
																		globalMap.put("tJSONDocOutput_2_CURRENT_PATH",
																				path);
																		tJSONDocOutput_2.setCurrentPath(path);
																		// take care the path will be created as array
																		if (".".equals(jsonPath) == false) {
																			if (jsonPath == null) {
																				jsonPath = "[" + Integer.MAX_VALUE
																						+ "]";
																			} else if (jsonPath
																					.endsWith("]") == false) {
																				jsonPath = jsonPath + "["
																						+ Integer.MAX_VALUE + "]"; // take
																													// care
																													// we
																													// never
																													// hit
																													// an
																													// existing
																													// array
																													// element
																				// this way we get the array itself as
																				// result of getNode(...)
																			}
																		}
																		com.fasterxml.jackson.databind.JsonNode node = tJSONDocOutput_2
																				.getNode(entryNode_tJSONDocOutput_2,
																						jsonPath, true);
																		com.fasterxml.jackson.databind.node.ArrayNode parentNode_tJSONDocOutput_2 = null;
																		if (node instanceof com.fasterxml.jackson.databind.node.ArrayNode) {
																			parentNode_tJSONDocOutput_2 = (com.fasterxml.jackson.databind.node.ArrayNode) node;
																		} else if (node instanceof com.fasterxml.jackson.databind.node.ObjectNode) {
																			throw new Exception(path
																					+ ": Actually an ArrayNode is expected, but there is already an ObjectNode at the path: "
																					+ jsonPath + ". Got node: " + node);
																		} else {
																			throw new Exception(path
																					+ ": Actually an ArrayNode is expected, but there is "
																					+ node + " at the path: " + jsonPath
																					+ ". Got node: " + node);
																		}
																		globalMap.put("parent_node_tJSONDocOutput_2",
																				parentNode_tJSONDocOutput_2);
																		globalMap.put("tJSONDocOutput_2_NB_LINE", 0);
																	} catch (Exception e) {
																		globalMap.put("tJSONDocOutput_2_ERROR_MESSAGE",
																				e.getMessage());
																		throw e;
																	}
																}
																try { // start block for tJSONDocOutput_2
																		// get the parent node
																	com.fasterxml.jackson.databind.JsonNode node = (com.fasterxml.jackson.databind.JsonNode) globalMap
																			.get("parent_node_tJSONDocOutput_2");
																	com.fasterxml.jackson.databind.node.ArrayNode parentNode = null;
																	if (node instanceof com.fasterxml.jackson.databind.node.ArrayNode) {
																		parentNode = (com.fasterxml.jackson.databind.node.ArrayNode) node;
																	} else {
																		throw new Exception(globalMap
																				.get("tJSONDocOutput_2_CURRENT_PATH")
																				+ ": Actually as parent an ArrayNode is expected, but there is already an ObjectNode from the component: "
																				+ tJSONDocOutput_2
																				+ ". Check the configuration.");
																	}
																	com.fasterxml.jackson.databind.node.ObjectNode currentNode_tJSONDocOutput_2 = parentNode
																			.addObject();
																	{
																		String fieldName = null;
																		if (fieldName == null
																				|| fieldName.trim().isEmpty()) {
																			fieldName = "order_id";
																		}
																		tJSONDocOutput_2.setValue(
																				currentNode_tJSONDocOutput_2, fieldName,
																				row8.order_id, false);
																	}
																	globalMap.put("tJSONDocOutput_2.order_id",
																			row8.order_id);
																	{
																		String fieldName = null;
																		if (fieldName == null
																				|| fieldName.trim().isEmpty()) {
																			fieldName = "product_id";
																		}
																		tJSONDocOutput_2.setValue(
																				currentNode_tJSONDocOutput_2, fieldName,
																				row8.product_id, false);
																	}
																	globalMap.put("tJSONDocOutput_2.product_id",
																			row8.product_id);
																	{
																		String fieldName = null;
																		if (fieldName == null
																				|| fieldName.trim().isEmpty()) {
																			fieldName = "price";
																		}
																		tJSONDocOutput_2.setValue(
																				currentNode_tJSONDocOutput_2, fieldName,
																				row8.price, false);
																	}
																	globalMap.put("tJSONDocOutput_2.price", row8.price);
																	{
																		String fieldName = null;
																		if (fieldName == null
																				|| fieldName.trim().isEmpty()) {
																			fieldName = "review_id";
																		}
																		tJSONDocOutput_2.setValue(
																				currentNode_tJSONDocOutput_2, fieldName,
																				row8.review_id, false);
																	}
																	globalMap.put("tJSONDocOutput_2.review_id",
																			row8.review_id);
																	{
																		String fieldName = null;
																		if (fieldName == null
																				|| fieldName.trim().isEmpty()) {
																			fieldName = "review_score";
																		}
																		tJSONDocOutput_2.setValue(
																				currentNode_tJSONDocOutput_2, fieldName,
																				row8.review_score, false);
																	}
																	globalMap.put("tJSONDocOutput_2.review_score",
																			row8.review_score);
																	{
																		String fieldName = null;
																		if (fieldName == null
																				|| fieldName.trim().isEmpty()) {
																			fieldName = "review_content";
																		}
																		tJSONDocOutput_2.setValue(
																				currentNode_tJSONDocOutput_2, fieldName,
																				row8.review_content, false);
																	}
																	globalMap.put("tJSONDocOutput_2.review_content",
																			row8.review_content);
																	globalMap.put("tJSONDocOutput_2_CURRENT_NODE",
																			currentNode_tJSONDocOutput_2);
																	Integer counter = (Integer) globalMap
																			.get("tJSONDocOutput_2_NB_LINE");
																	globalMap.put("tJSONDocOutput_2_NB_LINE",
																			counter.intValue() + 1);
																} catch (Exception e) {
																	globalMap.put("tJSONDocOutput_2_ERROR_MESSAGE",
																			e.getMessage());
																	throw e;
																}
															} else {
																throw new Exception(
																		"The referenced current document from component: tJSONDocOutput_1 is null. Please check the job structur!");
															}

															tos_count_tJSONDocOutput_2++;

															/**
															 * [tJSONDocOutput_2 main ] stop
															 */

															/**
															 * [tJSONDocOutput_2 process_data_begin ] start
															 */

															currentComponent = "tJSONDocOutput_2";

															/**
															 * [tJSONDocOutput_2 process_data_begin ] stop
															 */

															/**
															 * [tJSONDocOutput_2 process_data_end ] start
															 */

															currentComponent = "tJSONDocOutput_2";

															/**
															 * [tJSONDocOutput_2 process_data_end ] stop
															 */

														} // End of branch "row8"

														/**
														 * [tUniqRow_2 process_data_end ] start
														 */

														currentComponent = "tUniqRow_2";

														/**
														 * [tUniqRow_2 process_data_end ] stop
														 */

													} // End of branch "order_info"

												} // close loop of lookup 'row5' // G_TM_M_043

											} // close loop of lookup 'row3' // G_TM_M_043

											/**
											 * [tMap_2 process_data_end ] start
											 */

											currentComponent = "tMap_2";

											/**
											 * [tMap_2 process_data_end ] stop
											 */

										} // End of branch "cust_order"

									} // close loop of lookup 'row4' // G_TM_M_043

									/**
									 * [tMap_1 process_data_end ] start
									 */

									currentComponent = "tMap_1";

									/**
									 * [tMap_1 process_data_end ] stop
									 */

									/**
									 * [tDBInput_1 process_data_end ] start
									 */

									currentComponent = "tDBInput_1";

									/**
									 * [tDBInput_1 process_data_end ] stop
									 */

									/**
									 * [tDBInput_1 end ] start
									 */

									currentComponent = "tDBInput_1";

								}
							} finally {
								if (rs_tDBInput_1 != null) {
									rs_tDBInput_1.close();
								}
								if (stmt_tDBInput_1 != null) {
									stmt_tDBInput_1.close();
								}
							}

							globalMap.put("tDBInput_1_NB_LINE", nb_line_tDBInput_1);

							ok_Hash.put("tDBInput_1", true);
							end_Hash.put("tDBInput_1", System.currentTimeMillis());

							/**
							 * [tDBInput_1 end ] stop
							 */

							/**
							 * [tMap_1 end ] start
							 */

							currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
// ###############################      

							if (execStat) {
								runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
							}

							ok_Hash.put("tMap_1", true);
							end_Hash.put("tMap_1", System.currentTimeMillis());

							/**
							 * [tMap_1 end ] stop
							 */

							/**
							 * [tMap_2 end ] start
							 */

							currentComponent = "tMap_2";

// ###############################
// # Lookup hashes releasing
// ###############################      

							if (execStat) {
								runStat.updateStat(resourceMap, iterateId, 2, 0, "cust_order");
							}

							ok_Hash.put("tMap_2", true);
							end_Hash.put("tMap_2", System.currentTimeMillis());

							/**
							 * [tMap_2 end ] stop
							 */

							/**
							 * [tUniqRow_1 end ] start
							 */

							currentComponent = "tUniqRow_1";

							globalMap.put("tUniqRow_1_NB_UNIQUES", nb_uniques_tUniqRow_1);
							globalMap.put("tUniqRow_1_NB_DUPLICATES", nb_duplicates_tUniqRow_1);

							if (execStat) {
								runStat.updateStat(resourceMap, iterateId, 2, 0, "cust_no");
							}

							ok_Hash.put("tUniqRow_1", true);
							end_Hash.put("tUniqRow_1", System.currentTimeMillis());

							/**
							 * [tUniqRow_1 end ] stop
							 */

							/**
							 * [tJSONDocOutput_1 end ] start
							 */

							currentComponent = "tJSONDocOutput_1";

							globalMap.remove("entryNode_tJSONDocOutput_1");
							globalMap.put("tJSONDocOutput_1_KEYS_AS_SQL_IN_CLAUSE", de.jlo.talendcomp.json.Util
									.buildSQLInClause(keyMap_tJSONDocOutput_1.keySet(), "is not null"));
							if (execStat) {
								runStat.updateStat(resourceMap, iterateId, 2, 0, "row7");
							}

							ok_Hash.put("tJSONDocOutput_1", true);
							end_Hash.put("tJSONDocOutput_1", System.currentTimeMillis());

							/**
							 * [tJSONDocOutput_1 end ] stop
							 */

							/**
							 * [tUniqRow_2 end ] start
							 */

							currentComponent = "tUniqRow_2";

							globalMap.put("tUniqRow_2_NB_UNIQUES", nb_uniques_tUniqRow_2);
							globalMap.put("tUniqRow_2_NB_DUPLICATES", nb_duplicates_tUniqRow_2);

							if (execStat) {
								runStat.updateStat(resourceMap, iterateId, 2, 0, "order_info");
							}

							ok_Hash.put("tUniqRow_2", true);
							end_Hash.put("tUniqRow_2", System.currentTimeMillis());

							/**
							 * [tUniqRow_2 end ] stop
							 */

							/**
							 * [tJSONDocOutput_2 end ] start
							 */

							currentComponent = "tJSONDocOutput_2";

							globalMap.remove("entryNode_tJSONDocOutput_2");
							globalMap.put("tJSONDocOutput_2_KEYS_AS_SQL_IN_CLAUSE", de.jlo.talendcomp.json.Util
									.buildSQLInClause(keyMap_tJSONDocOutput_2.keySet(), "is not null"));
							if (execStat) {
								runStat.updateStat(resourceMap, iterateId, 2, 0, "row8");
							}

							ok_Hash.put("tJSONDocOutput_2", true);
							end_Hash.put("tJSONDocOutput_2", System.currentTimeMillis());

							/**
							 * [tJSONDocOutput_2 end ] stop
							 */

							if (execStat) {
								runStat.updateStatOnConnection("iterate1", 2, "exec" + NB_ITERATE_tDBInput_1);
							}

							/**
							 * [tFlowToIterate_1 process_data_end ] start
							 */

							currentComponent = "tFlowToIterate_1";

							/**
							 * [tFlowToIterate_1 process_data_end ] stop
							 */

						} // End of branch "row1"

						/**
						 * [tFileInputDelimited_1 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						nb_line_tFileInputDelimited_1++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_1 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_1 != null) {
							csvReadertFileInputDelimited_1.close();
						}
					}
					if (csvReadertFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE", nb_line_tFileInputDelimited_1);
					}

				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tFlowToIterate_1 end ] start
				 */

				currentComponent = "tFlowToIterate_1";

				globalMap.put("tFlowToIterate_1_NB_LINE", nb_line_tFlowToIterate_1);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tFlowToIterate_1", true);
				end_Hash.put("tFlowToIterate_1", System.currentTimeMillis());

				/**
				 * [tFlowToIterate_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_2"
			globalMap.remove("tHash_Lookup_row5");

			// free memory for "tMap_2"
			globalMap.remove("tHash_Lookup_row3");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row4");

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tFlowToIterate_1 finally ] start
				 */

				currentComponent = "tFlowToIterate_1";

				/**
				 * [tFlowToIterate_1 finally ] stop
				 */

				/**
				 * [tDBInput_1 finally ] start
				 */

				currentComponent = "tDBInput_1";

				/**
				 * [tDBInput_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tUniqRow_1 finally ] start
				 */

				currentComponent = "tUniqRow_1";

				/**
				 * [tUniqRow_1 finally ] stop
				 */

				/**
				 * [tJSONDocOutput_1 finally ] start
				 */

				currentComponent = "tJSONDocOutput_1";

				/**
				 * [tJSONDocOutput_1 finally ] stop
				 */

				/**
				 * [tUniqRow_2 finally ] start
				 */

				currentComponent = "tUniqRow_2";

				/**
				 * [tUniqRow_2 finally ] stop
				 */

				/**
				 * [tJSONDocOutput_2 finally ] start
				 */

				currentComponent = "tJSONDocOutput_2";

				/**
				 * [tJSONDocOutput_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public static class row5Struct implements routines.system.IPersistableComparableLookupRow<row5Struct> {
		final static byte[] commonByteArrayLock_ETL_TALEND_STUDIO_EXAMPLE_extract_json = new byte[0];
		static byte[] commonByteArray_ETL_TALEND_STUDIO_EXAMPLE_extract_json = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String review_id;

		public String getReview_id() {
			return this.review_id;
		}

		public String order_id;

		public String getOrder_id() {
			return this.order_id;
		}

		public String review_score;

		public String getReview_score() {
			return this.review_score;
		}

		public String review_comment_title;

		public String getReview_comment_title() {
			return this.review_comment_title;
		}

		public String review_comment_message;

		public String getReview_comment_message() {
			return this.review_comment_message;
		}

		public String review_creation_date;

		public String getReview_creation_date() {
			return this.review_creation_date;
		}

		public String review_answer_timestamp;

		public String getReview_answer_timestamp() {
			return this.review_answer_timestamp;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.order_id == null) ? 0 : this.order_id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row5Struct other = (row5Struct) obj;

			if (this.order_id == null) {
				if (other.order_id != null)
					return false;

			} else if (!this.order_id.equals(other.order_id))

				return false;

			return true;
		}

		public void copyDataTo(row5Struct other) {

			other.review_id = this.review_id;
			other.order_id = this.order_id;
			other.review_score = this.review_score;
			other.review_comment_title = this.review_comment_title;
			other.review_comment_message = this.review_comment_message;
			other.review_creation_date = this.review_creation_date;
			other.review_answer_timestamp = this.review_answer_timestamp;

		}

		public void copyKeysDataTo(row5Struct other) {

			other.order_id = this.order_id;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ETL_TALEND_STUDIO_EXAMPLE_extract_json.length) {
					if (length < 1024 && commonByteArray_ETL_TALEND_STUDIO_EXAMPLE_extract_json.length == 0) {
						commonByteArray_ETL_TALEND_STUDIO_EXAMPLE_extract_json = new byte[1024];
					} else {
						commonByteArray_ETL_TALEND_STUDIO_EXAMPLE_extract_json = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ETL_TALEND_STUDIO_EXAMPLE_extract_json, 0, length);
				strReturn = new String(commonByteArray_ETL_TALEND_STUDIO_EXAMPLE_extract_json, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ETL_TALEND_STUDIO_EXAMPLE_extract_json) {

				try {

					int length = 0;

					this.order_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.order_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.review_id = readString(dis, ois);

				this.review_score = readString(dis, ois);

				this.review_comment_title = readString(dis, ois);

				this.review_comment_message = readString(dis, ois);

				this.review_creation_date = readString(dis, ois);

				this.review_answer_timestamp = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.review_id, dos, oos);

				writeString(this.review_score, dos, oos);

				writeString(this.review_comment_title, dos, oos);

				writeString(this.review_comment_message, dos, oos);

				writeString(this.review_creation_date, dos, oos);

				writeString(this.review_answer_timestamp, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("review_id=" + review_id);
			sb.append(",order_id=" + order_id);
			sb.append(",review_score=" + review_score);
			sb.append(",review_comment_title=" + review_comment_title);
			sb.append(",review_comment_message=" + review_comment_message);
			sb.append(",review_creation_date=" + review_creation_date);
			sb.append(",review_answer_timestamp=" + review_answer_timestamp);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.order_id, other.order_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row5Struct row5 = new row5Struct();

				/**
				 * [tAdvancedHash_row5 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row5", false);
				start_Hash.put("tAdvancedHash_row5", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row5";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row5");
				}

				int tos_count_tAdvancedHash_row5 = 0;

				// connection name:row5
				// source node:tDBInput_2 - inputs:(after_tFileInputDelimited_1)
				// outputs:(row5,row5) | target node:tAdvancedHash_row5 - inputs:(row5)
				// outputs:()
				// linked node: tMap_2 - inputs:(cust_order,row5,row3)
				// outputs:(cust_no,order_info)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row5 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row5Struct>getLookup(matchingModeEnum_row5);

				globalMap.put("tHash_Lookup_row5", tHash_Lookup_row5);

				/**
				 * [tAdvancedHash_row5 begin ] stop
				 */

				/**
				 * [tDBInput_2 begin ] start
				 */

				ok_Hash.put("tDBInput_2", false);
				start_Hash.put("tDBInput_2", System.currentTimeMillis());

				currentComponent = "tDBInput_2";

				int tos_count_tDBInput_2 = 0;

				java.util.Calendar calendar_tDBInput_2 = java.util.Calendar.getInstance();
				calendar_tDBInput_2.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_2 = calendar_tDBInput_2.getTime();
				int nb_line_tDBInput_2 = 0;
				java.sql.Connection conn_tDBInput_2 = null;
				conn_tDBInput_2 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

				String dbquery_tDBInput_2 = "SELECT \n  `olist_order_reviews_dataset`.`review_id`, \n  `olist_order_reviews_dataset`.`order_id`, \n  `olist_order_revie"
						+ "ws_dataset`.`review_score`, \n  `olist_order_reviews_dataset`.`review_comment_title`, \n  `olist_order_reviews_dataset`.`r"
						+ "eview_comment_message`, \n  `olist_order_reviews_dataset`.`review_creation_date`, \n  `olist_order_reviews_dataset`.`revie"
						+ "w_answer_timestamp`\nFROM `olist_order_reviews_dataset`";

				globalMap.put("tDBInput_2_QUERY", dbquery_tDBInput_2);
				java.sql.ResultSet rs_tDBInput_2 = null;

				try {
					rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
					java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
					int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

					String tmpContent_tDBInput_2 = null;

					while (rs_tDBInput_2.next()) {
						nb_line_tDBInput_2++;

						if (colQtyInRs_tDBInput_2 < 1) {
							row5.review_id = null;
						} else {

							row5.review_id = routines.system.JDBCUtil.getString(rs_tDBInput_2, 1, false);
						}
						if (colQtyInRs_tDBInput_2 < 2) {
							row5.order_id = null;
						} else {

							row5.order_id = routines.system.JDBCUtil.getString(rs_tDBInput_2, 2, false);
						}
						if (colQtyInRs_tDBInput_2 < 3) {
							row5.review_score = null;
						} else {

							row5.review_score = routines.system.JDBCUtil.getString(rs_tDBInput_2, 3, false);
						}
						if (colQtyInRs_tDBInput_2 < 4) {
							row5.review_comment_title = null;
						} else {

							row5.review_comment_title = routines.system.JDBCUtil.getString(rs_tDBInput_2, 4, false);
						}
						if (colQtyInRs_tDBInput_2 < 5) {
							row5.review_comment_message = null;
						} else {

							row5.review_comment_message = routines.system.JDBCUtil.getString(rs_tDBInput_2, 5, false);
						}
						if (colQtyInRs_tDBInput_2 < 6) {
							row5.review_creation_date = null;
						} else {

							row5.review_creation_date = routines.system.JDBCUtil.getString(rs_tDBInput_2, 6, false);
						}
						if (colQtyInRs_tDBInput_2 < 7) {
							row5.review_answer_timestamp = null;
						} else {

							row5.review_answer_timestamp = routines.system.JDBCUtil.getString(rs_tDBInput_2, 7, false);
						}

						/**
						 * [tDBInput_2 begin ] stop
						 */

						/**
						 * [tDBInput_2 main ] start
						 */

						currentComponent = "tDBInput_2";

						tos_count_tDBInput_2++;

						/**
						 * [tDBInput_2 main ] stop
						 */

						/**
						 * [tDBInput_2 process_data_begin ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row5 main ] start
						 */

						currentComponent = "tAdvancedHash_row5";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row5");
						}

						row5Struct row5_HashRow = new row5Struct();

						row5_HashRow.review_id = row5.review_id;

						row5_HashRow.order_id = row5.order_id;

						row5_HashRow.review_score = row5.review_score;

						row5_HashRow.review_comment_title = row5.review_comment_title;

						row5_HashRow.review_comment_message = row5.review_comment_message;

						row5_HashRow.review_creation_date = row5.review_creation_date;

						row5_HashRow.review_answer_timestamp = row5.review_answer_timestamp;

						tHash_Lookup_row5.put(row5_HashRow);

						tos_count_tAdvancedHash_row5++;

						/**
						 * [tAdvancedHash_row5 main ] stop
						 */

						/**
						 * [tAdvancedHash_row5 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row5";

						/**
						 * [tAdvancedHash_row5 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row5 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row5";

						/**
						 * [tAdvancedHash_row5 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 process_data_end ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 end ] start
						 */

						currentComponent = "tDBInput_2";

					}
				} finally {
					if (rs_tDBInput_2 != null) {
						rs_tDBInput_2.close();
					}
					if (stmt_tDBInput_2 != null) {
						stmt_tDBInput_2.close();
					}
				}

				globalMap.put("tDBInput_2_NB_LINE", nb_line_tDBInput_2);

				ok_Hash.put("tDBInput_2", true);
				end_Hash.put("tDBInput_2", System.currentTimeMillis());

				/**
				 * [tDBInput_2 end ] stop
				 */

				/**
				 * [tAdvancedHash_row5 end ] start
				 */

				currentComponent = "tAdvancedHash_row5";

				tHash_Lookup_row5.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row5");
				}

				ok_Hash.put("tAdvancedHash_row5", true);
				end_Hash.put("tAdvancedHash_row5", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row5 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_2 finally ] start
				 */

				currentComponent = "tDBInput_2";

				/**
				 * [tDBInput_2 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row5 finally ] start
				 */

				currentComponent = "tAdvancedHash_row5";

				/**
				 * [tAdvancedHash_row5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}

	public static class row4Struct implements routines.system.IPersistableComparableLookupRow<row4Struct> {
		final static byte[] commonByteArrayLock_ETL_TALEND_STUDIO_EXAMPLE_extract_json = new byte[0];
		static byte[] commonByteArray_ETL_TALEND_STUDIO_EXAMPLE_extract_json = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String order_id;

		public String getOrder_id() {
			return this.order_id;
		}

		public String customer_id;

		public String getCustomer_id() {
			return this.customer_id;
		}

		public String order_status;

		public String getOrder_status() {
			return this.order_status;
		}

		public String order_purchase;

		public String getOrder_purchase() {
			return this.order_purchase;
		}

		public String order_purchase_timestamp;

		public String getOrder_purchase_timestamp() {
			return this.order_purchase_timestamp;
		}

		public String order_approved_at;

		public String getOrder_approved_at() {
			return this.order_approved_at;
		}

		public String order_delivered_carrier_date;

		public String getOrder_delivered_carrier_date() {
			return this.order_delivered_carrier_date;
		}

		public String order_delivered_customer_date;

		public String getOrder_delivered_customer_date() {
			return this.order_delivered_customer_date;
		}

		public String order_estimated_delivery_date;

		public String getOrder_estimated_delivery_date() {
			return this.order_estimated_delivery_date;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.customer_id == null) ? 0 : this.customer_id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row4Struct other = (row4Struct) obj;

			if (this.customer_id == null) {
				if (other.customer_id != null)
					return false;

			} else if (!this.customer_id.equals(other.customer_id))

				return false;

			return true;
		}

		public void copyDataTo(row4Struct other) {

			other.order_id = this.order_id;
			other.customer_id = this.customer_id;
			other.order_status = this.order_status;
			other.order_purchase = this.order_purchase;
			other.order_purchase_timestamp = this.order_purchase_timestamp;
			other.order_approved_at = this.order_approved_at;
			other.order_delivered_carrier_date = this.order_delivered_carrier_date;
			other.order_delivered_customer_date = this.order_delivered_customer_date;
			other.order_estimated_delivery_date = this.order_estimated_delivery_date;

		}

		public void copyKeysDataTo(row4Struct other) {

			other.customer_id = this.customer_id;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ETL_TALEND_STUDIO_EXAMPLE_extract_json.length) {
					if (length < 1024 && commonByteArray_ETL_TALEND_STUDIO_EXAMPLE_extract_json.length == 0) {
						commonByteArray_ETL_TALEND_STUDIO_EXAMPLE_extract_json = new byte[1024];
					} else {
						commonByteArray_ETL_TALEND_STUDIO_EXAMPLE_extract_json = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ETL_TALEND_STUDIO_EXAMPLE_extract_json, 0, length);
				strReturn = new String(commonByteArray_ETL_TALEND_STUDIO_EXAMPLE_extract_json, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ETL_TALEND_STUDIO_EXAMPLE_extract_json) {

				try {

					int length = 0;

					this.customer_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.customer_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.order_id = readString(dis, ois);

				this.order_status = readString(dis, ois);

				this.order_purchase = readString(dis, ois);

				this.order_purchase_timestamp = readString(dis, ois);

				this.order_approved_at = readString(dis, ois);

				this.order_delivered_carrier_date = readString(dis, ois);

				this.order_delivered_customer_date = readString(dis, ois);

				this.order_estimated_delivery_date = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.order_id, dos, oos);

				writeString(this.order_status, dos, oos);

				writeString(this.order_purchase, dos, oos);

				writeString(this.order_purchase_timestamp, dos, oos);

				writeString(this.order_approved_at, dos, oos);

				writeString(this.order_delivered_carrier_date, dos, oos);

				writeString(this.order_delivered_customer_date, dos, oos);

				writeString(this.order_estimated_delivery_date, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("order_id=" + order_id);
			sb.append(",customer_id=" + customer_id);
			sb.append(",order_status=" + order_status);
			sb.append(",order_purchase=" + order_purchase);
			sb.append(",order_purchase_timestamp=" + order_purchase_timestamp);
			sb.append(",order_approved_at=" + order_approved_at);
			sb.append(",order_delivered_carrier_date=" + order_delivered_carrier_date);
			sb.append(",order_delivered_customer_date=" + order_delivered_customer_date);
			sb.append(",order_estimated_delivery_date=" + order_estimated_delivery_date);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.customer_id, other.customer_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();

				/**
				 * [tAdvancedHash_row4 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row4", false);
				start_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row4");
				}

				int tos_count_tAdvancedHash_row4 = 0;

				// connection name:row4
				// source node:tDBInput_3 - inputs:(after_tFileInputDelimited_1)
				// outputs:(row4,row4) | target node:tAdvancedHash_row4 - inputs:(row4)
				// outputs:()
				// linked node: tMap_1 - inputs:(row2,row4) outputs:(cust_order)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row4 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row4Struct>getLookup(matchingModeEnum_row4);

				globalMap.put("tHash_Lookup_row4", tHash_Lookup_row4);

				/**
				 * [tAdvancedHash_row4 begin ] stop
				 */

				/**
				 * [tDBInput_3 begin ] start
				 */

				ok_Hash.put("tDBInput_3", false);
				start_Hash.put("tDBInput_3", System.currentTimeMillis());

				currentComponent = "tDBInput_3";

				int tos_count_tDBInput_3 = 0;

				java.util.Calendar calendar_tDBInput_3 = java.util.Calendar.getInstance();
				calendar_tDBInput_3.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_3 = calendar_tDBInput_3.getTime();
				int nb_line_tDBInput_3 = 0;
				java.sql.Connection conn_tDBInput_3 = null;
				conn_tDBInput_3 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

				String dbquery_tDBInput_3 = "SELECT \n  `olist_orders_dataset`.`order_id`, \n  `olist_orders_dataset`.`order_status`, \n  `olist_orders_dataset`.`order"
						+ "_purchase`, \n  `olist_orders_dataset`.`customer_id`, \n  `olist_orders_dataset`.`order_purchase_timestamp`, \n  `olist_ord"
						+ "ers_dataset`.`order_approved_at`, \n  `olist_orders_dataset`.`order_delivered_carrier_date`, \n  `olist_orders_dataset`.`o"
						+ "rder_delivered_customer_date`, \n  `olist_orders_dataset`.`order_estimated_delivery_date`\nFROM `olist_orders_dataset`";

				globalMap.put("tDBInput_3_QUERY", dbquery_tDBInput_3);
				java.sql.ResultSet rs_tDBInput_3 = null;

				try {
					rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
					java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
					int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

					String tmpContent_tDBInput_3 = null;

					while (rs_tDBInput_3.next()) {
						nb_line_tDBInput_3++;

						if (colQtyInRs_tDBInput_3 < 1) {
							row4.order_id = null;
						} else {

							row4.order_id = routines.system.JDBCUtil.getString(rs_tDBInput_3, 1, false);
						}
						if (colQtyInRs_tDBInput_3 < 2) {
							row4.customer_id = null;
						} else {

							row4.customer_id = routines.system.JDBCUtil.getString(rs_tDBInput_3, 2, false);
						}
						if (colQtyInRs_tDBInput_3 < 3) {
							row4.order_status = null;
						} else {

							row4.order_status = routines.system.JDBCUtil.getString(rs_tDBInput_3, 3, false);
						}
						if (colQtyInRs_tDBInput_3 < 4) {
							row4.order_purchase = null;
						} else {

							row4.order_purchase = routines.system.JDBCUtil.getString(rs_tDBInput_3, 4, false);
						}
						if (colQtyInRs_tDBInput_3 < 5) {
							row4.order_purchase_timestamp = null;
						} else {

							row4.order_purchase_timestamp = routines.system.JDBCUtil.getString(rs_tDBInput_3, 5, false);
						}
						if (colQtyInRs_tDBInput_3 < 6) {
							row4.order_approved_at = null;
						} else {

							row4.order_approved_at = routines.system.JDBCUtil.getString(rs_tDBInput_3, 6, false);
						}
						if (colQtyInRs_tDBInput_3 < 7) {
							row4.order_delivered_carrier_date = null;
						} else {

							row4.order_delivered_carrier_date = routines.system.JDBCUtil.getString(rs_tDBInput_3, 7,
									false);
						}
						if (colQtyInRs_tDBInput_3 < 8) {
							row4.order_delivered_customer_date = null;
						} else {

							row4.order_delivered_customer_date = routines.system.JDBCUtil.getString(rs_tDBInput_3, 8,
									false);
						}
						if (colQtyInRs_tDBInput_3 < 9) {
							row4.order_estimated_delivery_date = null;
						} else {

							row4.order_estimated_delivery_date = routines.system.JDBCUtil.getString(rs_tDBInput_3, 9,
									false);
						}

						/**
						 * [tDBInput_3 begin ] stop
						 */

						/**
						 * [tDBInput_3 main ] start
						 */

						currentComponent = "tDBInput_3";

						tos_count_tDBInput_3++;

						/**
						 * [tDBInput_3 main ] stop
						 */

						/**
						 * [tDBInput_3 process_data_begin ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row4 main ] start
						 */

						currentComponent = "tAdvancedHash_row4";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row4");
						}

						row4Struct row4_HashRow = new row4Struct();

						row4_HashRow.order_id = row4.order_id;

						row4_HashRow.customer_id = row4.customer_id;

						row4_HashRow.order_status = row4.order_status;

						row4_HashRow.order_purchase = row4.order_purchase;

						row4_HashRow.order_purchase_timestamp = row4.order_purchase_timestamp;

						row4_HashRow.order_approved_at = row4.order_approved_at;

						row4_HashRow.order_delivered_carrier_date = row4.order_delivered_carrier_date;

						row4_HashRow.order_delivered_customer_date = row4.order_delivered_customer_date;

						row4_HashRow.order_estimated_delivery_date = row4.order_estimated_delivery_date;

						tHash_Lookup_row4.put(row4_HashRow);

						tos_count_tAdvancedHash_row4++;

						/**
						 * [tAdvancedHash_row4 main ] stop
						 */

						/**
						 * [tAdvancedHash_row4 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row4";

						/**
						 * [tAdvancedHash_row4 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row4 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row4";

						/**
						 * [tAdvancedHash_row4 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 process_data_end ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 end ] start
						 */

						currentComponent = "tDBInput_3";

					}
				} finally {
					if (rs_tDBInput_3 != null) {
						rs_tDBInput_3.close();
					}
					if (stmt_tDBInput_3 != null) {
						stmt_tDBInput_3.close();
					}
				}

				globalMap.put("tDBInput_3_NB_LINE", nb_line_tDBInput_3);

				ok_Hash.put("tDBInput_3", true);
				end_Hash.put("tDBInput_3", System.currentTimeMillis());

				/**
				 * [tDBInput_3 end ] stop
				 */

				/**
				 * [tAdvancedHash_row4 end ] start
				 */

				currentComponent = "tAdvancedHash_row4";

				tHash_Lookup_row4.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row4");
				}

				ok_Hash.put("tAdvancedHash_row4", true);
				end_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row4 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_3 finally ] start
				 */

				currentComponent = "tDBInput_3";

				/**
				 * [tDBInput_3 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row4 finally ] start
				 */

				currentComponent = "tAdvancedHash_row4";

				/**
				 * [tAdvancedHash_row4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}

	public static class row3Struct implements routines.system.IPersistableComparableLookupRow<row3Struct> {
		final static byte[] commonByteArrayLock_ETL_TALEND_STUDIO_EXAMPLE_extract_json = new byte[0];
		static byte[] commonByteArray_ETL_TALEND_STUDIO_EXAMPLE_extract_json = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String order_id;

		public String getOrder_id() {
			return this.order_id;
		}

		public String order_item_id;

		public String getOrder_item_id() {
			return this.order_item_id;
		}

		public String product_id;

		public String getProduct_id() {
			return this.product_id;
		}

		public String seller_id;

		public String getSeller_id() {
			return this.seller_id;
		}

		public String shipping_limit_date;

		public String getShipping_limit_date() {
			return this.shipping_limit_date;
		}

		public String price;

		public String getPrice() {
			return this.price;
		}

		public String freight_value;

		public String getFreight_value() {
			return this.freight_value;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.order_id == null) ? 0 : this.order_id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row3Struct other = (row3Struct) obj;

			if (this.order_id == null) {
				if (other.order_id != null)
					return false;

			} else if (!this.order_id.equals(other.order_id))

				return false;

			return true;
		}

		public void copyDataTo(row3Struct other) {

			other.order_id = this.order_id;
			other.order_item_id = this.order_item_id;
			other.product_id = this.product_id;
			other.seller_id = this.seller_id;
			other.shipping_limit_date = this.shipping_limit_date;
			other.price = this.price;
			other.freight_value = this.freight_value;

		}

		public void copyKeysDataTo(row3Struct other) {

			other.order_id = this.order_id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ETL_TALEND_STUDIO_EXAMPLE_extract_json.length) {
					if (length < 1024 && commonByteArray_ETL_TALEND_STUDIO_EXAMPLE_extract_json.length == 0) {
						commonByteArray_ETL_TALEND_STUDIO_EXAMPLE_extract_json = new byte[1024];
					} else {
						commonByteArray_ETL_TALEND_STUDIO_EXAMPLE_extract_json = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ETL_TALEND_STUDIO_EXAMPLE_extract_json, 0, length);
				strReturn = new String(commonByteArray_ETL_TALEND_STUDIO_EXAMPLE_extract_json, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ETL_TALEND_STUDIO_EXAMPLE_extract_json) {

				try {

					int length = 0;

					this.order_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.order_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.order_item_id = readString(dis, ois);

				this.product_id = readString(dis, ois);

				this.seller_id = readString(dis, ois);

				this.shipping_limit_date = readString(dis, ois);

				this.price = readString(dis, ois);

				this.freight_value = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.order_item_id, dos, oos);

				writeString(this.product_id, dos, oos);

				writeString(this.seller_id, dos, oos);

				writeString(this.shipping_limit_date, dos, oos);

				writeString(this.price, dos, oos);

				writeString(this.freight_value, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("order_id=" + order_id);
			sb.append(",order_item_id=" + order_item_id);
			sb.append(",product_id=" + product_id);
			sb.append(",seller_id=" + seller_id);
			sb.append(",shipping_limit_date=" + shipping_limit_date);
			sb.append(",price=" + price);
			sb.append(",freight_value=" + freight_value);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.order_id, other.order_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();

				/**
				 * [tAdvancedHash_row3 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row3", false);
				start_Hash.put("tAdvancedHash_row3", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row3");
				}

				int tos_count_tAdvancedHash_row3 = 0;

				// connection name:row3
				// source node:tDBInput_4 - inputs:(after_tFileInputDelimited_1)
				// outputs:(row3,row3) | target node:tAdvancedHash_row3 - inputs:(row3)
				// outputs:()
				// linked node: tMap_2 - inputs:(cust_order,row5,row3)
				// outputs:(cust_no,order_info)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row3 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row3Struct>getLookup(matchingModeEnum_row3);

				globalMap.put("tHash_Lookup_row3", tHash_Lookup_row3);

				/**
				 * [tAdvancedHash_row3 begin ] stop
				 */

				/**
				 * [tDBInput_4 begin ] start
				 */

				ok_Hash.put("tDBInput_4", false);
				start_Hash.put("tDBInput_4", System.currentTimeMillis());

				currentComponent = "tDBInput_4";

				int tos_count_tDBInput_4 = 0;

				java.util.Calendar calendar_tDBInput_4 = java.util.Calendar.getInstance();
				calendar_tDBInput_4.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_4 = calendar_tDBInput_4.getTime();
				int nb_line_tDBInput_4 = 0;
				java.sql.Connection conn_tDBInput_4 = null;
				conn_tDBInput_4 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();

				String dbquery_tDBInput_4 = "SELECT \n  `olist_orders_items_dataset`.`order_id`, \n  `olist_orders_items_dataset`.`order_item_id`, \n  `olist_orders_it"
						+ "ems_dataset`.`product_id`, \n  `olist_orders_items_dataset`.`seller_id`, \n  `olist_orders_items_dataset`.`shipping_limit_"
						+ "date`, \n  `olist_orders_items_dataset`.`price`, \n  `olist_orders_items_dataset`.`freight_value`\nFROM `olist_orders_items"
						+ "_dataset`";

				globalMap.put("tDBInput_4_QUERY", dbquery_tDBInput_4);
				java.sql.ResultSet rs_tDBInput_4 = null;

				try {
					rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
					java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
					int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

					String tmpContent_tDBInput_4 = null;

					while (rs_tDBInput_4.next()) {
						nb_line_tDBInput_4++;

						if (colQtyInRs_tDBInput_4 < 1) {
							row3.order_id = null;
						} else {

							row3.order_id = routines.system.JDBCUtil.getString(rs_tDBInput_4, 1, false);
						}
						if (colQtyInRs_tDBInput_4 < 2) {
							row3.order_item_id = null;
						} else {

							row3.order_item_id = routines.system.JDBCUtil.getString(rs_tDBInput_4, 2, false);
						}
						if (colQtyInRs_tDBInput_4 < 3) {
							row3.product_id = null;
						} else {

							row3.product_id = routines.system.JDBCUtil.getString(rs_tDBInput_4, 3, false);
						}
						if (colQtyInRs_tDBInput_4 < 4) {
							row3.seller_id = null;
						} else {

							row3.seller_id = routines.system.JDBCUtil.getString(rs_tDBInput_4, 4, false);
						}
						if (colQtyInRs_tDBInput_4 < 5) {
							row3.shipping_limit_date = null;
						} else {

							row3.shipping_limit_date = routines.system.JDBCUtil.getString(rs_tDBInput_4, 5, false);
						}
						if (colQtyInRs_tDBInput_4 < 6) {
							row3.price = null;
						} else {

							row3.price = routines.system.JDBCUtil.getString(rs_tDBInput_4, 6, false);
						}
						if (colQtyInRs_tDBInput_4 < 7) {
							row3.freight_value = null;
						} else {

							row3.freight_value = routines.system.JDBCUtil.getString(rs_tDBInput_4, 7, false);
						}

						/**
						 * [tDBInput_4 begin ] stop
						 */

						/**
						 * [tDBInput_4 main ] start
						 */

						currentComponent = "tDBInput_4";

						tos_count_tDBInput_4++;

						/**
						 * [tDBInput_4 main ] stop
						 */

						/**
						 * [tDBInput_4 process_data_begin ] start
						 */

						currentComponent = "tDBInput_4";

						/**
						 * [tDBInput_4 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row3 main ] start
						 */

						currentComponent = "tAdvancedHash_row3";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row3");
						}

						row3Struct row3_HashRow = new row3Struct();

						row3_HashRow.order_id = row3.order_id;

						row3_HashRow.order_item_id = row3.order_item_id;

						row3_HashRow.product_id = row3.product_id;

						row3_HashRow.seller_id = row3.seller_id;

						row3_HashRow.shipping_limit_date = row3.shipping_limit_date;

						row3_HashRow.price = row3.price;

						row3_HashRow.freight_value = row3.freight_value;

						tHash_Lookup_row3.put(row3_HashRow);

						tos_count_tAdvancedHash_row3++;

						/**
						 * [tAdvancedHash_row3 main ] stop
						 */

						/**
						 * [tAdvancedHash_row3 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row3";

						/**
						 * [tAdvancedHash_row3 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row3 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row3";

						/**
						 * [tAdvancedHash_row3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_4 process_data_end ] start
						 */

						currentComponent = "tDBInput_4";

						/**
						 * [tDBInput_4 process_data_end ] stop
						 */

						/**
						 * [tDBInput_4 end ] start
						 */

						currentComponent = "tDBInput_4";

					}
				} finally {
					if (rs_tDBInput_4 != null) {
						rs_tDBInput_4.close();
					}
					if (stmt_tDBInput_4 != null) {
						stmt_tDBInput_4.close();
					}
				}

				globalMap.put("tDBInput_4_NB_LINE", nb_line_tDBInput_4);

				ok_Hash.put("tDBInput_4", true);
				end_Hash.put("tDBInput_4", System.currentTimeMillis());

				/**
				 * [tDBInput_4 end ] stop
				 */

				/**
				 * [tAdvancedHash_row3 end ] start
				 */

				currentComponent = "tAdvancedHash_row3";

				tHash_Lookup_row3.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row3");
				}

				ok_Hash.put("tAdvancedHash_row3", true);
				end_Hash.put("tAdvancedHash_row3", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row3 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_4 finally ] start
				 */

				currentComponent = "tDBInput_4";

				/**
				 * [tDBInput_4 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row3 finally ] start
				 */

				currentComponent = "tAdvancedHash_row3";

				/**
				 * [tAdvancedHash_row3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}

	public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_ETL_TALEND_STUDIO_EXAMPLE_extract_json = new byte[0];
		static byte[] commonByteArray_ETL_TALEND_STUDIO_EXAMPLE_extract_json = new byte[0];

		public String dummy;

		public String getDummy() {
			return this.dummy;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ETL_TALEND_STUDIO_EXAMPLE_extract_json.length) {
					if (length < 1024 && commonByteArray_ETL_TALEND_STUDIO_EXAMPLE_extract_json.length == 0) {
						commonByteArray_ETL_TALEND_STUDIO_EXAMPLE_extract_json = new byte[1024];
					} else {
						commonByteArray_ETL_TALEND_STUDIO_EXAMPLE_extract_json = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ETL_TALEND_STUDIO_EXAMPLE_extract_json, 0, length);
				strReturn = new String(commonByteArray_ETL_TALEND_STUDIO_EXAMPLE_extract_json, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ETL_TALEND_STUDIO_EXAMPLE_extract_json) {

				try {

					int length = 0;

					this.dummy = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.dummy, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("dummy=" + dummy);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJSONDocSave_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tJSONDocSave_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row6Struct row6 = new row6Struct();

				/**
				 * [tLogRow_2 begin ] start
				 */

				ok_Hash.put("tLogRow_2", false);
				start_Hash.put("tLogRow_2", System.currentTimeMillis());

				currentComponent = "tLogRow_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row6");
				}

				int tos_count_tLogRow_2 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_2 = "|";
				java.io.PrintStream consoleOut_tLogRow_2 = null;

				StringBuilder strBuffer_tLogRow_2 = null;
				int nb_line_tLogRow_2 = 0;
///////////////////////    			

				/**
				 * [tLogRow_2 begin ] stop
				 */

				/**
				 * [tJSONDocSave_1 begin ] start
				 */

				ok_Hash.put("tJSONDocSave_1", false);
				start_Hash.put("tJSONDocSave_1", System.currentTimeMillis());

				currentComponent = "tJSONDocSave_1";

				int tos_count_tJSONDocSave_1 = 0;

				de.jlo.talendcomp.json.JsonDocument tJSONDocSave_1 = new de.jlo.talendcomp.json.JsonDocument(
						(com.fasterxml.jackson.databind.JsonNode) globalMap.get("tJSONDocOpen_1_CURRENT_NODE"));
				com.fasterxml.jackson.databind.JsonNode tJSONDocSave_1_outputNode = null;
				try {
					tJSONDocSave_1_outputNode = tJSONDocSave_1.getConditionalUnwrappedRootNode((false), true);
					globalMap.put("tJSONDocSave_1_CURRENT_NODE", tJSONDocSave_1_outputNode);
				} catch (Exception e) {
					globalMap.put("tJSONDocSave_1_ERROR_MESSAGE", e.getMessage());
					throw e;
				}
				String filePath_tJSONDocSave_1 = context.output
						+ TalendDate.formatDate("yyyyMMdd", TalendDate.getCurrentDate()) + "\\"
						+ TalendDate.formatDate("yyyyMMdd", TalendDate.getCurrentDate()) + ".json";
				try {
					tJSONDocSave_1.writeToFile(filePath_tJSONDocSave_1, true, false);
					globalMap.put("tJSONDocSave_1_OUTPUT_FILE_PATH", filePath_tJSONDocSave_1);
				} catch (Exception e) {
					globalMap.put("tJSONDocSave_1_ERROR_MESSAGE", e.getMessage());
					throw e;
				}
				Object jsonOutput_tJSONDocSave_1 = null;
				try {
					jsonOutput_tJSONDocSave_1 = tJSONDocSave_1.getJsonString(tJSONDocSave_1_outputNode, true, false);
				} catch (Exception e) {
					globalMap.put("tJSONDocSave_1_ERROR_MESSAGE", e.getMessage());
					throw e;
				}
				globalMap.put("tJSONDocSave_1_JSON_STRING", (String) jsonOutput_tJSONDocSave_1);
				if (true) { // open a loop for one row
					row6.dummy = (String) jsonOutput_tJSONDocSave_1;

					/**
					 * [tJSONDocSave_1 begin ] stop
					 */

					/**
					 * [tJSONDocSave_1 main ] start
					 */

					currentComponent = "tJSONDocSave_1";

					tos_count_tJSONDocSave_1++;

					/**
					 * [tJSONDocSave_1 main ] stop
					 */

					/**
					 * [tJSONDocSave_1 process_data_begin ] start
					 */

					currentComponent = "tJSONDocSave_1";

					/**
					 * [tJSONDocSave_1 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_2 main ] start
					 */

					currentComponent = "tLogRow_2";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row6");
					}

///////////////////////		

					strBuffer_tLogRow_2 = new StringBuilder();

					if (row6.dummy != null) { //

						strBuffer_tLogRow_2.append(String.valueOf(row6.dummy));

					} //

					if (globalMap.get("tLogRow_CONSOLE") != null) {
						consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
					} else {
						consoleOut_tLogRow_2 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
						globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_2);
					}
					consoleOut_tLogRow_2.println(strBuffer_tLogRow_2.toString());
					consoleOut_tLogRow_2.flush();
					nb_line_tLogRow_2++;
//////

//////                    

///////////////////////    			

					tos_count_tLogRow_2++;

					/**
					 * [tLogRow_2 main ] stop
					 */

					/**
					 * [tLogRow_2 process_data_begin ] start
					 */

					currentComponent = "tLogRow_2";

					/**
					 * [tLogRow_2 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_2 process_data_end ] start
					 */

					currentComponent = "tLogRow_2";

					/**
					 * [tLogRow_2 process_data_end ] stop
					 */

					/**
					 * [tJSONDocSave_1 process_data_end ] start
					 */

					currentComponent = "tJSONDocSave_1";

					/**
					 * [tJSONDocSave_1 process_data_end ] stop
					 */

					/**
					 * [tJSONDocSave_1 end ] start
					 */

					currentComponent = "tJSONDocSave_1";

				} // close loop from tJSONDocSave_1

				ok_Hash.put("tJSONDocSave_1", true);
				end_Hash.put("tJSONDocSave_1", System.currentTimeMillis());

				/**
				 * [tJSONDocSave_1 end ] stop
				 */

				/**
				 * [tLogRow_2 end ] start
				 */

				currentComponent = "tLogRow_2";

//////
//////
				globalMap.put("tLogRow_2_NB_LINE", nb_line_tLogRow_2);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row6");
				}

				ok_Hash.put("tLogRow_2", true);
				end_Hash.put("tLogRow_2", System.currentTimeMillis());

				/**
				 * [tLogRow_2 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tJSONDocSave_1 finally ] start
				 */

				currentComponent = "tJSONDocSave_1";

				/**
				 * [tJSONDocSave_1 finally ] stop
				 */

				/**
				 * [tLogRow_2 finally ] start
				 */

				currentComponent = "tLogRow_2";

				/**
				 * [tLogRow_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJSONDocSave_1_SUBPROCESS_STATE", 1);
	}

	public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPostjob_1 begin ] start
				 */

				ok_Hash.put("tPostjob_1", false);
				start_Hash.put("tPostjob_1", System.currentTimeMillis());

				currentComponent = "tPostjob_1";

				int tos_count_tPostjob_1 = 0;

				/**
				 * [tPostjob_1 begin ] stop
				 */

				/**
				 * [tPostjob_1 main ] start
				 */

				currentComponent = "tPostjob_1";

				tos_count_tPostjob_1++;

				/**
				 * [tPostjob_1 main ] stop
				 */

				/**
				 * [tPostjob_1 process_data_begin ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 process_data_begin ] stop
				 */

				/**
				 * [tPostjob_1 process_data_end ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 process_data_end ] stop
				 */

				/**
				 * [tPostjob_1 end ] start
				 */

				currentComponent = "tPostjob_1";

				ok_Hash.put("tPostjob_1", true);
				end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tDBCommit_1Process(globalMap);

				/**
				 * [tPostjob_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPostjob_1 finally ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}

	public void tDBCommit_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBCommit_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBCommit_1 begin ] start
				 */

				ok_Hash.put("tDBCommit_1", false);
				start_Hash.put("tDBCommit_1", System.currentTimeMillis());

				currentComponent = "tDBCommit_1";

				int tos_count_tDBCommit_1 = 0;

				/**
				 * [tDBCommit_1 begin ] stop
				 */

				/**
				 * [tDBCommit_1 main ] start
				 */

				currentComponent = "tDBCommit_1";

				java.sql.Connection conn_tDBCommit_1 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				if (conn_tDBCommit_1 != null && !conn_tDBCommit_1.isClosed()) {

					conn_tDBCommit_1.commit();

				}

				tos_count_tDBCommit_1++;

				/**
				 * [tDBCommit_1 main ] stop
				 */

				/**
				 * [tDBCommit_1 process_data_begin ] start
				 */

				currentComponent = "tDBCommit_1";

				/**
				 * [tDBCommit_1 process_data_begin ] stop
				 */

				/**
				 * [tDBCommit_1 process_data_end ] start
				 */

				currentComponent = "tDBCommit_1";

				/**
				 * [tDBCommit_1 process_data_end ] stop
				 */

				/**
				 * [tDBCommit_1 end ] start
				 */

				currentComponent = "tDBCommit_1";

				ok_Hash.put("tDBCommit_1", true);
				end_Hash.put("tDBCommit_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tDBClose_1Process(globalMap);

				/**
				 * [tDBCommit_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBCommit_1 finally ] start
				 */

				currentComponent = "tDBCommit_1";

				/**
				 * [tDBCommit_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBCommit_1_SUBPROCESS_STATE", 1);
	}

	public void tDBClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBClose_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBClose_1 begin ] start
				 */

				ok_Hash.put("tDBClose_1", false);
				start_Hash.put("tDBClose_1", System.currentTimeMillis());

				currentComponent = "tDBClose_1";

				int tos_count_tDBClose_1 = 0;

				/**
				 * [tDBClose_1 begin ] stop
				 */

				/**
				 * [tDBClose_1 main ] start
				 */

				currentComponent = "tDBClose_1";

				java.sql.Connection conn_tDBClose_1 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				if (conn_tDBClose_1 != null && !conn_tDBClose_1.isClosed()) {

					conn_tDBClose_1.close();

					if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_tDBConnection_1"))
							&& routines.system.BundleUtils.inOSGi()) {
						Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").getMethod("checkedShutdown")
								.invoke(null, (Object[]) null);
					}

				}

				tos_count_tDBClose_1++;

				/**
				 * [tDBClose_1 main ] stop
				 */

				/**
				 * [tDBClose_1 process_data_begin ] start
				 */

				currentComponent = "tDBClose_1";

				/**
				 * [tDBClose_1 process_data_begin ] stop
				 */

				/**
				 * [tDBClose_1 process_data_end ] start
				 */

				currentComponent = "tDBClose_1";

				/**
				 * [tDBClose_1 process_data_end ] stop
				 */

				/**
				 * [tDBClose_1 end ] start
				 */

				currentComponent = "tDBClose_1";

				ok_Hash.put("tDBClose_1", true);
				end_Hash.put("tDBClose_1", System.currentTimeMillis());

				/**
				 * [tDBClose_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBClose_1 finally ] start
				 */

				currentComponent = "tDBClose_1";

				/**
				 * [tDBClose_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBClose_1_SUBPROCESS_STATE", 1);
	}

	public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPrejob_1 begin ] start
				 */

				ok_Hash.put("tPrejob_1", false);
				start_Hash.put("tPrejob_1", System.currentTimeMillis());

				currentComponent = "tPrejob_1";

				int tos_count_tPrejob_1 = 0;

				/**
				 * [tPrejob_1 begin ] stop
				 */

				/**
				 * [tPrejob_1 main ] start
				 */

				currentComponent = "tPrejob_1";

				tos_count_tPrejob_1++;

				/**
				 * [tPrejob_1 main ] stop
				 */

				/**
				 * [tPrejob_1 process_data_begin ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 process_data_begin ] stop
				 */

				/**
				 * [tPrejob_1 process_data_end ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 process_data_end ] stop
				 */

				/**
				 * [tPrejob_1 end ] start
				 */

				currentComponent = "tPrejob_1";

				ok_Hash.put("tPrejob_1", true);
				end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tDBConnection_1Process(globalMap);

				/**
				 * [tPrejob_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPrejob_1 finally ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}

	public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBConnection_1 begin ] start
				 */

				ok_Hash.put("tDBConnection_1", false);
				start_Hash.put("tDBConnection_1", System.currentTimeMillis());

				currentComponent = "tDBConnection_1";

				int tos_count_tDBConnection_1 = 0;

				String properties_tDBConnection_1 = "noDatetimeStringSync=true";
				if (properties_tDBConnection_1 == null || properties_tDBConnection_1.trim().length() == 0) {
					properties_tDBConnection_1 += "rewriteBatchedStatements=true&allowLoadLocalInfile=true";
				} else if (properties_tDBConnection_1 != null
						&& !properties_tDBConnection_1.contains("rewriteBatchedStatements")) {
					properties_tDBConnection_1 += "&rewriteBatchedStatements=true";
				}
				if (properties_tDBConnection_1 != null
						&& !properties_tDBConnection_1.contains("allowLoadLocalInfile")) {
					properties_tDBConnection_1 += "&allowLoadLocalInfile=true";
				}

				String url_tDBConnection_1 = "jdbc:mysql://" + "127.0.0.1" + ":" + "3306" + "/" + "olist" + "?"
						+ properties_tDBConnection_1;
				String dbUser_tDBConnection_1 = "root";

				final String decryptedPassword_tDBConnection_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:ptvRYRGdPE1YdRscnsbgI4DZHhlA3bdv9sFDFTqwiDM=");
				String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;

				java.sql.Connection conn_tDBConnection_1 = null;

				String driverClass_tDBConnection_1 = "com.mysql.cj.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
				globalMap.put("driverClass_tDBConnection_1", driverClass_tDBConnection_1);

				conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1, dbUser_tDBConnection_1,
						dbPwd_tDBConnection_1);

				globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
				if (null != conn_tDBConnection_1) {

					conn_tDBConnection_1.setAutoCommit(false);
				}

				globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);

				globalMap.put("db_tDBConnection_1", "olist");

				/**
				 * [tDBConnection_1 begin ] stop
				 */

				/**
				 * [tDBConnection_1 main ] start
				 */

				currentComponent = "tDBConnection_1";

				tos_count_tDBConnection_1++;

				/**
				 * [tDBConnection_1 main ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_begin ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_begin ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_end ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_end ] stop
				 */

				/**
				 * [tDBConnection_1 end ] start
				 */

				currentComponent = "tDBConnection_1";

				ok_Hash.put("tDBConnection_1", true);
				end_Hash.put("tDBConnection_1", System.currentTimeMillis());

				/**
				 * [tDBConnection_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBConnection_1 finally ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final extract_json extract_jsonClass = new extract_json();

		int exitCode = extract_jsonClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = extract_json.class.getClassLoader().getResourceAsStream(
					"etl_talend_studio_example/extract_json_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = extract_json.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
					context.setContextType("bk", "id_String");
					context.bk = (String) context.getProperty("bk");
					context.setContextType("data_source", "id_String");
					context.data_source = (String) context.getProperty("data_source");
					context.setContextType("output", "id_String");
					context.output = (String) context.getProperty("output");
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("bk")) {
				context.bk = (String) parentContextMap.get("bk");
			}
			if (parentContextMap.containsKey("data_source")) {
				context.data_source = (String) parentContextMap.get("data_source");
			}
			if (parentContextMap.containsKey("output")) {
				context.output = (String) parentContextMap.get("output");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		try {
			errorCode = null;
			tPrejob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPrejob_1) {
			globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

			e_tPrejob_1.printStackTrace();

		}

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tJSONDocOpen_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tJSONDocOpen_1) {
			globalMap.put("tJSONDocOpen_1_SUBPROCESS_STATE", -1);

			e_tJSONDocOpen_1.printStackTrace();

		}
		try {
			errorCode = null;
			tJSONDocSave_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tJSONDocSave_1) {
			globalMap.put("tJSONDocSave_1_SUBPROCESS_STATE", -1);

			e_tJSONDocSave_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		try {
			errorCode = null;
			tPostjob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPostjob_1) {
			globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

			e_tPostjob_1.printStackTrace();

		}

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : extract_json");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeSqlDbConnections();

	}

	private void closeSqlDbConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_tDBConnection_1");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 211112 characters generated by Talend Open Studio for Data Integration on the
 * July 20, 2020 2:11:19 PM ICT
 ************************************************************************************************/